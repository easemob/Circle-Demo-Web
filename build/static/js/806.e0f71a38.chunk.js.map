{"version":3,"file":"static/js/806.e0f71a38.chunk.js","mappings":"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","sources":["webpack://circle/./src/components/HeaderWrap/index.module.less?371d","components/HeaderWrap/index.js","webpack://circle/./src/views/Chat/index.module.less?850a","webpack://circle/./src/views/Chat/components/Header/index.module.less?d965","views/Chat/components/Header/index.js","webpack://circle/./src/views/Chat/components/ContactDetail/index.module.less?2aeb","views/Chat/components/ContactDetail/index.js","views/Chat/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"headerWrap\":\"index_headerWrap__7KmC+\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\n\nconst HeaderWrap = (props) => {\n  const { children, style = {} } = props;\n  return (\n    <div className={s.headerWrap} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default memo(HeaderWrap);\n","// extracted by mini-css-extract-plugin\nexport default {\"chatWrap\":\"index_chatWrap__ukSwf\",\"contentWrap\":\"index_contentWrap__KYi9g\",\"messageWrap\":\"index_messageWrap__26OT7\",\"iptWrap\":\"index_iptWrap__qnadS\",\"main\":\"index_main__DsDiT\",\"side\":\"index_side__dBeHg\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"index_wrap__XXUmu\",\"left\":\"index_left__6A8oy\",\"nickName\":\"index_nickName__fyolt\",\"op\":\"index_op__SLwEG\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\nimport HeaderWrap from \"@/components/HeaderWrap\";\nimport AvatarInfo from \"@/components/AvatarInfo\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Icon from \"@/components/Icon\"\nimport { Menu } from \"antd\";\nimport WebIM from \"@/utils/WebIM\";\n\n\nconst ChannelHeader = (props) => {\n  const { appUserInfo, conversationList, setConversationList } = props;\n  const navigate = useNavigate();\n  const { userId } = useParams();\n  const onMenuClick = (e) => {\n    if (e.key === \"deleteConversation\") {\n      WebIM.conn.deleteConversation({\n        channel: userId,\n        chatType: 'singleChat',\n        deleteRoam: false,\n      }).then(() => {\n        const findIndex = conversationList.indexOf(userId);\n        if(findIndex>-1){\n          conversationList.splice(findIndex,1);\n          setConversationList(conversationList);\n        }\n        navigate(\"/main/contacts/index\");\n      })\n    }\n  }\n  return (\n    <HeaderWrap>\n      <div className={s.wrap}>\n        <div className={s.left}>\n          <AvatarInfo size={36} online={appUserInfo[userId]?.online} src={appUserInfo[userId]?.avatarurl} />\n          <span className={s.nickName}>{appUserInfo[userId]?.nickname || userId}</span>\n        </div>\n        <div className={s.op}>\n          <Menu\n            onClick={onMenuClick}\n            style={{ padding: 0 }}\n            theme={\"dark\"}\n            selectable={false}\n            triggerSubMenuAction=\"click\"\n            mode=\"horizontal\"\n            items={getChatItem()}\n          ></Menu>\n        </div>\n      </div>\n    </HeaderWrap>\n  );\n};\nconst getChatItem = () => {\n  return [\n    {\n      label: (\n        <div className={s.iconCon}>\n          <Icon iconClass={s.icon} name=\"ellipsis\" size=\"24px\" />\n        </div>\n      ),\n      key: \"SubMenu\",\n      children: [\n        {\n          label: (\n            <div className={s.menuWrap}>\n              <Icon name=\"trash\" size=\"16px\" />\n              <span>删除会话</span>\n            </div>\n          ),\n          key: \"deleteConversation\"\n        },\n      ]\n    }\n  ];\n};\nconst mapStateToProps = ({ app, contact }) => {\n  return {\n    appUserInfo: app.appUserInfo,\n    conversationList: contact.conversationList\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setConversationList: (params) => {\n      return dispatch({\n        type: \"contact/setConversationList\",\n        payload: params\n      });\n    },\n  }\n}\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ChannelHeader));","// extracted by mini-css-extract-plugin\nexport default {\"detailWrap\":\"index_detailWrap__pWZwQ\",\"bg\":\"index_bg__fpU3w\",\"contactOp\":\"index_contactOp__2kk14\",\"infoCon\":\"index_infoCon__3VhOr\",\"userInfo\":\"index_userInfo__vyls5\",\"avatar\":\"index_avatar__dMLle\",\"nickname\":\"index_nickname__vPYRn\",\"idInfo\":\"index_idInfo__ffy41\",\"buttonCon\":\"index_buttonCon__4CaOh\",\"private\":\"index_private__Tcmzn\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\nimport AvatarInfo from \"@/components/AvatarInfo\";\nimport { connect } from \"react-redux\";\nimport { Modal, Dropdown, Menu } from 'antd';\nimport { useNavigate } from \"react-router-dom\";\nimport WebIM from \"@/utils/WebIM\";\nimport Icon from \"@/components/Icon\";\n\n\nconst ContactDetail = (props) => {\n    const { visible, userId, appUserInfo, contactsList, hasSentApply, handleCancel, setHasSentApply } = props;\n    const navigate = useNavigate();\n    const renderButton = () => {\n        if (hasSentApply.indexOf(userId) > -1) {\n            return (\n                <div className={`circleBtn152 circleBtnGray disable`}>好友请求待确认</div>\n            )\n        } else if (contactsList.indexOf(userId) < 0) {\n            return (\n                <div className={`circleBtn106 circleBtnGray }`} onClick={addContact}>加为好友</div>\n            )\n        }\n    }\n    //私聊\n    const toChat = () => {\n        handleCancel();\n        navigate(`/main/contacts/chat/${userId}`);\n    };\n    //加为好友\n    const addContact = () => {\n        WebIM.conn.addContact(userId);\n        setHasSentApply([...hasSentApply, userId]);\n    }\n\n    const menu = (uid, onDelete) => {\n        return (\n            <Menu\n                onClick={() => { onDelete(uid) }}\n                items={[\n                    {\n                        key: '1',\n                        label: (\n                            <div className=\"circleDropItem\">\n                                <Icon name=\"trash\" size=\"22px\" iconClass=\"circleDropMenuIcon\" />\n                                <span className=\"circleDropMenuOp\">删除好友</span>\n                            </div>\n                        ),\n                    },\n                ]}\n            />\n        )\n    }\n    //删除联系人\n    const deleteContact = (uid) => {\n        WebIM.conn.deleteContact(uid);\n    }\n    return (\n        <Modal\n            visible={visible}\n            width=\"545px\"\n            wrapClassName={s.detailWrap}\n            footer={null}\n            onCancel={handleCancel}\n        >\n            <div className={s.bg}>\n                {contactsList.indexOf(userId) > -1 && <Dropdown overlay={menu(userId, deleteContact)} placement=\"bottomRight\" trigger={['click']} overlayClassName=\"circleDropDown\">\n                    <div className={s.contactOp}>\n                        <Icon size=\"26px\" name=\"ellipsis\" color=\"#fff\" />\n                    </div>\n                </Dropdown>}\n            </div>\n            <div className={s.infoCon}>\n                <div className={s.userInfo}>\n                    <div className={s.avatar}>\n                        <AvatarInfo size={90} src={appUserInfo[userId]?.avatarurl} online={appUserInfo[userId]?.online} />\n                    </div>\n                    <div className={s.nickname}>{appUserInfo[userId]?.nickname || userId}</div>\n                    <div className={s.idInfo}>环信ID：{userId}</div>\n                </div>\n                <div className={s.buttonCon}>\n                    {renderButton()}\n                    <div className={`circleBtn106 circleBtn ${s.private}`} onClick={toChat}>私聊ta</div>\n                </div>\n            </div>\n        </Modal>\n    );\n};\nconst mapStateToProps = ({ app, contact }) => {\n    return {\n        appUserInfo: app.appUserInfo,\n        contactsList: contact.contactsList,\n        hasSentApply: contact.hasSentApply\n    };\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setHasSentApply: (params) => {\n            return dispatch({\n                type: \"contact/setHasSentApply\",\n                payload: params\n            });\n        }\n    };\n};\n\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ContactDetail));","import React, { memo, useEffect, useState, useMemo } from \"react\";\nimport s from \"./index.module.less\";\nimport Header from \"./components/Header\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport MessageLeft from \"@/components/MessageLeft\";\nimport Input from \"@/components/Input\";\nimport { CHAT_TYPE, MESSAGE_ITEM_SOURCE, SCROLL_WARP_ID } from \"@/consts\";\nimport WebIM from \"@/utils/WebIM\";\nimport { recallMessage, getUsersInfo } from \"@/utils/common\";\nimport { Spin } from \"antd\";\nimport ContactDetail from \"./components/ContactDetail\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst PAGE_SIZE = 20;\n\nconst Chat = (props) => {\n  const { chatMap, pushChatMessage, handleThreadPanel, setMsgReaction, conversationList, setConversationList } = props;\n\n  const { userId } = useParams();\n\n  const messageInfo = useMemo(() => {\n    return chatMap[CHAT_TYPE.single].get(userId) || {};\n  }, [userId, chatMap]);\n\n  const loadMoreData = () => {\n    getHistoryMsg({ cursor: messageInfo?.cursor });\n  };\n\n  const getHistoryMsg = ({ cursor = \"\" }) => {\n    WebIM.conn\n      .getHistoryMessages({\n        targetId: userId,\n        pageSize: PAGE_SIZE,\n        chatType: CHAT_TYPE.single,\n        cursor\n      })\n      .then((res) => {\n        res.messages.forEach((item) => {\n          setMsgReaction({\n            msgId: item.id,\n            reactions: item.reactions\n          });\n        });\n        pushChatMessage({\n          chatType: CHAT_TYPE.single,\n          fromId: userId,\n          messageInfo: {\n            list: res.messages,\n            cursor: res.cursor,\n            loadCount: res.messages.length\n          },\n          reset: cursor ? false : true\n        });\n      });\n  };\n\n  //拉取漫游消息\n  useEffect(() => {\n    // 切换channel 关闭thread面板\n    handleThreadPanel(false);\n    getHistoryMsg({ cursor: \"\" });\n    if (conversationList.indexOf(userId) < 0) {\n      conversationList.unshift(userId)\n      setConversationList(conversationList)\n    }\n  }, [userId]);\n\n  //好友详情展示\n  const [visible, setVisible] = useState(false);\n  //消息操作\n  const handleOperation = (op, isThreadMessage = false, data) => {\n    console.log(\"chat:\", op, data);\n    switch (op) {\n      case \"recall\":\n        recallMessage(data, isThreadMessage);\n        break;\n      case \"openUserInfoPanel\":\n        //打开单聊者详情\n        if (data.from !== WebIM.conn.user) {\n          //更新单聊者信息\n          getUsersInfo([data.from]).then(()=>{\n            setVisible(true);\n          })\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <div className={s.chatWrap}>\n      <div className={s.main}>\n        <Header />\n        <div className={s.contentWrap}>\n          <div id={SCROLL_WARP_ID} className={s.messageWrap}>\n            <InfiniteScroll\n              inverse={true}\n              dataLength={messageInfo?.list?.length || 0}\n              next={loadMoreData}\n              hasMore={messageInfo?.loadCount >= PAGE_SIZE}\n              style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n              loader={<Spin />}\n              endMessage={\n                <div style={{ textAlign: \"center\" }}>没有更多消息啦～</div>\n              }\n              scrollableTarget={SCROLL_WARP_ID}\n            >\n              {messageInfo?.list?.map((item) => {\n                return (\n                  <div key={item.id}>\n                    <MessageLeft\n                      message={item}\n                      onHandleOperation={handleOperation}\n                      source={MESSAGE_ITEM_SOURCE.single}\n                    />\n                  </div>\n                );\n              })}\n            </InfiniteScroll>\n          </div>\n          <div className={s.iptWrap}>\n            <Input chatType={CHAT_TYPE.single} fromId={userId} />\n          </div>\n        </div>\n      </div>\n      <ContactDetail\n        visible={visible}\n        userId={userId}\n        handleCancel={() => setVisible(false)}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ channel, app, contact }) => {\n  return {\n    visible: channel.channelVisible,\n    chatMap: app.chatMap,\n    showThreadPanel: channel.showThreadPanel,\n    conversationList: contact.conversationList\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setVisible: (params) => {\n      return dispatch({\n        type: \"channel/setVisible\",\n        payload: params\n      });\n    },\n    pushChatMessage: (params) => {\n      return dispatch({\n        type: \"app/pushChatMessage\",\n        payload: params\n      });\n    },\n    handleThreadPanel: (params) => {\n      return dispatch({\n        type: \"channel/setThreadPanelStatus\",\n        payload: params\n      });\n    },\n    setMsgReaction: (params) => {\n      return dispatch({\n        type: \"app/setMsgReaction\",\n        payload: params\n      });\n    },\n    setConversationList: (params) => {\n      return dispatch({\n        type: \"contact/setConversationList\",\n        payload: params\n      });\n    },\n  };\n};\n\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(Chat));\n"],"names":["HeaderWrap","props","children","style","className","s","memo","getChatItem","label","Icon","iconClass","name","size","key","connect","app","contact","appUserInfo","conversationList","dispatch","setConversationList","params","type","payload","navigate","useNavigate","userId","useParams","AvatarInfo","online","src","avatarurl","nickname","onClick","e","WebIM","channel","chatType","deleteRoam","then","findIndex","indexOf","splice","padding","theme","selectable","triggerSubMenuAction","mode","items","contactsList","hasSentApply","setHasSentApply","uid","onDelete","visible","handleCancel","addContact","width","wrapClassName","footer","onCancel","overlay","placement","trigger","overlayClassName","color","channelVisible","chatMap","showThreadPanel","setVisible","pushChatMessage","handleThreadPanel","setMsgReaction","messageInfo","useMemo","CHAT_TYPE","get","getHistoryMsg","cursor","targetId","pageSize","res","messages","forEach","item","msgId","id","reactions","fromId","list","loadCount","length","reset","useEffect","unshift","useState","handleOperation","op","isThreadMessage","data","console","log","recallMessage","from","getUsersInfo","Header","SCROLL_WARP_ID","inverse","dataLength","next","hasMore","display","flexDirection","loader","endMessage","textAlign","scrollableTarget","map","MessageLeft","message","onHandleOperation","source","MESSAGE_ITEM_SOURCE","Input"],"sourceRoot":""}