{"version":3,"file":"static/js/982.9c8bf498.chunk.js","mappings":"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","sources":["webpack://circle/./src/components/BasicInfo/index.module.less?e2c4","components/BasicInfo/index.js","webpack://circle/./src/components/CloseIcon/index.module.less?1ca7","components/CloseIcon/index.js","webpack://circle/./src/components/MemberItem/index.module.less?cdd0","components/MemberItem/index.js","webpack://circle/./src/views/Thread/index.module.less?c52a","webpack://circle/./src/views/Thread/components/Header/index.module.less?6778","views/Thread/utils.js","webpack://circle/./src/views/Thread/components/ThreadMember/index.module.less?b101","views/Thread/components/ThreadMember/index.js","views/Thread/components/Header/index.js","webpack://circle/./src/views/Thread/components/Name/index.module.less?952f","views/Thread/components/Name/index.js","webpack://circle/./src/views/Thread/components/OriginalMsg/index.module.less?23f8","views/Thread/components/OriginalMsg/index.js","views/Thread/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"info\":\"index_info__ZJIn6\",\"defaultStyle\":\"index_defaultStyle__+aVsA\",\"name\":\"index_name__DW1g1\",\"all\":\"index_all__JUGKz\",\"online\":\"index_online__pBQbe\",\"offline\":\"index_offline__nm8iG\"};","import style from \"./index.module.less\";\nimport React, { memo } from \"react\";\n\nconst BasicInfo = (props) => {\n    const { online, name, showOnline } = props\n    return (\n        <div className={style.info}>\n            <span className={`${style.defaultStyle} ${showOnline ? style.name : style.all}`}>{name}</span>\n            {showOnline && <span className={`${style.online} ${online ? null : style.offline}`}>{online ? '在线' : '离线'}</span>}\n        </div>\n    );\n};\n\nexport default memo(BasicInfo);\n","// extracted by mini-css-extract-plugin\nexport default {\"close\":\"index_close__A4OxI\"};","import React, { memo } from \"react\";\nimport Icon from \"../Icon\";\nimport s from './index.module.less'\n\nconst CloseIcon = () => {\n    return (\n        <span className={s.close}>\n            <Icon name=\"xmark\" color=\"#C7C7C7\" size=\"18px\" />\n        </span>\n    );\n};\n\nexport default memo(CloseIcon);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"index_contactsItem__td4Mf\",\"selected\":\"index_selected__gwyZ5\",\"contactsItem2\":\"index_contactsItem2__cp+N3\",\"mainInfo\":\"index_mainInfo__5wuox\",\"avatar\":\"index_avatar__jTpQV\",\"type2\":\"index_type2__rGTXq\",\"basicInfo\":\"index_basicInfo__B8XcK\",\"operation\":\"index_operation__-G2DM\"};","import BasicInfo from '@/components/BasicInfo'\nimport AvatarInfo from '@/components/AvatarInfo'\nimport s from \"./index.module.less\";\nimport React, { memo, useRef, useState, useEffect } from \"react\";\n\nconst MemberItem = (props) => {\n    const { info, uid, operationReactNode, handlerHover, borderType, basicShowOnline, size } = props;\n    const memberItemRef = useRef();\n    const [selected, setSelected] = useState(false);\n    //点击消息\n    useEffect(() => {\n        let onClick = (e) => {\n            let dom = memberItemRef.current;\n            if (dom) {\n                // 如果点击的区域不在自定义dom范围\n                if (dom.contains(e.target)) {\n                    setSelected(true)\n                } else {\n                    setSelected(false)\n                }\n            }\n        };\n        document.addEventListener(\"click\", onClick);\n        return () => {\n            document.removeEventListener(\"click\", onClick);\n        };\n    }, []);\n    return (\n        <div className={`memberItem ${s.contactsItem} ${selected ? s.selected : borderType === 2 ? s.contactsItem2 : null} `} onMouseOver={() => { handlerHover && handlerHover(info?.uid) }} onMouseLeave={() => { handlerHover && handlerHover(\"\") }}>\n            <div className={s.avatar}>\n                <AvatarInfo size={size} name={info?.nickname || uid} src={info?.avatarurl} online={info?.online} />\n            </div>\n            <div className={`${s.mainInfo} ${borderType === 2 ? s.type2 : null}`}>\n                <div className={s.basicInfo}>\n                    <BasicInfo name={info?.nickname || uid} src={info?.avatarurl} online={info?.online} showOnline={basicShowOnline} />\n                </div>\n                <div className={s.operation} ref={memberItemRef}>\n                    {operationReactNode}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(MemberItem);\n\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__kBiDQ\",\"contentWrap\":\"index_contentWrap__QMLvx\",\"messageWrap\":\"index_messageWrap__4vhxX\",\"messageItem\":\"index_messageItem__3agRj\",\"iptWrap\":\"index_iptWrap__NMNuC\"};","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__tzeXz\",\"close\":\"index_close__MF9VT\",\"createCon\":\"index_createCon__MElwt\",\"threadBar\":\"index_threadBar__uw1FD\",\"nameCon\":\"index_nameCon__Ncr-N\",\"channelInfo\":\"index_channelInfo__26U8h\",\"line\":\"index_line__tM0mm\",\"iconCon\":\"index_iconCon__XUjIF\",\"name\":\"index_name__llrZI\",\"threadInfo\":\"index_threadInfo__E8D0D\",\"editIcon\":\"index_editIcon__nm0Fa\",\"threadMember\":\"index_threadMember__yjLIx\",\"updateNickname\":\"index_updateNickname__dBUyN\",\"title\":\"index_title__C-4j3\",\"updateCon\":\"index_updateCon__Tf7k7\",\"input\":\"index_input__tiIki\",\"count\":\"index_count__Ro5mN\",\"confirm\":\"index_confirm__ZxHyb\",\"logoutCon\":\"index_logoutCon__HrMXM\",\"content\":\"index_content__0I6Sx\",\"buttons\":\"index_buttons__4zZOm\",\"membersCon\":\"index_membersCon__AR6wD\"};","import Icon from \"@/components/Icon\";\nimport { Menu } from 'antd';\nconst THREAD_OPERATION = {\n    \"threadMember\": {\n        id: \"threadMember\",\n        name: \"子区成员\",\n        iconName: \"person_2\"\n    },\n    \"editThread\": {\n        id: \"editThread\",\n        name: \"编辑子区\",\n        iconName: \"gear\"\n    },\n    \"leaveThread\": {\n        id: \"leaveThread\",\n        name: \"退出子区\",\n        iconName: \"door\"\n    },\n    \"destroyThread\": {\n        id: \"destroyThread\",\n        name: \"删除子区\",\n        iconName: \"trash\"\n    },\n}\nconst getOperationEl = (opList, cb) => {\n    const itemList = []\n    opList.forEach((item) => {\n        itemList.push({\n            key: item,\n            label: (\n                <div className=\"circleDropItem\">\n                    <Icon name={THREAD_OPERATION[item].iconName} size=\"22px\" iconClass=\"circleDropMenuIcon\" />\n                    <span className=\"circleDropMenuOp\">{THREAD_OPERATION[item].name}</span>\n                </div>\n            ),\n        })\n    })\n    return (\n        <Menu items={itemList} onClick={cb} />\n    )\n}\n\nexport { THREAD_OPERATION, getOperationEl }","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__Nq0mB\",\"header\":\"index_header__y0pgN\",\"title\":\"index_title__aOSmL\",\"close\":\"index_close__R1V3P\",\"container\":\"index_container__p7hc2\"};","import React, { memo, useState, useEffect } from \"react\";\nimport s from \"./index.module.less\";\nimport MemberItem from \"@/components/MemberItem\";\nimport Icon from \"@/components/Icon\";\nimport { connect } from \"react-redux\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport WebIM from \"@/utils/WebIM\";\nimport { getUsersInfo } from \"@/utils/common\"\nimport CloseIcon from \"@/components/CloseIcon\"\n\nconst SCROLL_WARP_ID = \"threadMemberScrollId\";\nconst LIMIT = 20;\nconst ThreadMember = (props) => {\n    const { close, appUserInfo, currentThreadInfo, visible } = props;\n    const [memberList, setMemberList] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    const [memberCursor, setMemberCursor] = useState('');\n    const loadMoreData = () => {\n        getThreadMember(currentThreadInfo?.id, memberCursor)\n    }\n    const getThreadMember = (id, cursor = \"\") => {\n        id && WebIM.conn.getChatThreadMembers({ chatThreadId: id, cursor, pageSize: LIMIT }).then((res) => {\n            setMemberCursor(res.properties.cursor);\n            getUsersInfo(res.data.affiliations).then(() => {\n                if (res.data.affiliations.length < LIMIT) {\n                    setHasMore(false);\n                } else {\n                    setHasMore(true);\n                }\n                if (cursor === \"\") {\n                    setMemberList(res.data.affiliations)\n                } else {\n                    setMemberList([...memberList, ...res.data.affiliations])\n                }\n            })\n        })\n    };\n    useEffect(() => {\n        if (visible) {\n            getThreadMember(currentThreadInfo?.id);\n        } else {\n            setMemberCursor(\"\");\n        }\n    }, [visible])\n    return (\n        <div className={s.layout}>\n            <div className={s.header}>\n                <span className={s.title}>子区成员</span>\n                <span onClick={close} className={s.closeIcon}><CloseIcon /></span>\n            </div>\n            <div id={SCROLL_WARP_ID} className={s.container}>\n                <InfiniteScroll\n                    dataLength={memberList.length || 0}\n                    next={loadMoreData}\n                    hasMore={hasMore}\n                    loader={<></>}\n                    endMessage={<></>}\n                    scrollableTarget={SCROLL_WARP_ID}\n                >\n                    {memberList?.length > 0 && memberList.map((item, index) => {\n                        return (\n                            <MemberItem size={36} info={appUserInfo[item]} showLine={true} basicShowOnline={false} uid={item} key={index} borderType={2}/>\n                        )\n                    })}\n                </InfiniteScroll>\n            </div>\n        </div>\n    );\n};\n//\nconst mapStateToProps = ({ app, thread }) => {\n    return {\n        appUserInfo: app.appUserInfo,\n        currentThreadInfo: thread.currentThreadInfo\n    };\n};\n\n\n\nexport default memo(connect(mapStateToProps, null)(ThreadMember));\n\n","import React, { memo, useState, useEffect, createRef } from \"react\";\nimport s from \"./index.module.less\";\nimport Icon from \"@/components/Icon\";\nimport { Dropdown, Popover, Modal, message } from 'antd';\nimport { getOperationEl } from \"../../utils\"\nimport ThreadMember from \"../ThreadMember\";\nimport { connect } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport WebIM from \"@/utils/WebIM\";\nimport { USER_ROLE } from \"@/consts\"\nimport { getThreadParentMsg, deleteLocalThread } from \"@/utils/common\"\nimport CloseIcon from \"@/components/CloseIcon\";\n\n\nconst ThreadHeader = (props) => {\n    let navigate = useNavigate();\n    const { isCreatingThread, currentThreadInfo, handleThreadPanel, serverRole, setThreadInfo, channelInfo, setChannelInfo } = props;\n    const { serverId, channelId, threadId } = useParams();\n    const role = serverRole[serverId];\n    const menu = (role) => {\n        let opList = [];\n        switch (role) {\n            case USER_ROLE.owner:\n                opList = [\"threadMember\", \"editThread\", \"leaveThread\", \"destroyThread\"];\n                break;\n            case USER_ROLE.moderator:\n                //第一期没有channel的权限，thread删除需要判断parentId的权限，和当前服务不是一套，无法处理，暂不能编辑、删除thread\n                //等二期channel有权限后，管理员可以编辑、删除thread\n                // opList = [\"threadMember\", \"editThread\", \"leaveThread\", \"destroyThread\"];\n                opList = [\"threadMember\", \"leaveThread\"];\n                break;\n            case USER_ROLE.user:\n                opList = [\"threadMember\", \"leaveThread\"];\n                break;\n            default:\n                break;\n        }\n        //thread owner可以编辑thread\n        if (currentThreadInfo?.owner === WebIM.conn.user && role !== USER_ROLE.owner) {\n            opList = [\"threadMember\", \"editThread\", \"leaveThread\"];\n        }\n        return getOperationEl(opList, handleOperation)\n    }\n    const handleOperation = ({ key }) => {\n        switch (key) {\n            case \"threadMember\":\n                handleVisibleChange(true)\n                break;\n            case \"editThread\":\n                showModal(\"editThread\");\n                break;\n            case \"leaveThread\":\n                showModal(\"leaveThread\");\n                break;\n            case \"destroyThread\":\n                showModal(\"destroyThread\");\n                break;\n            default:\n                break;\n        }\n    }\n    //子区成员列表\n    const [visible, setVisible] = useState(false);\n    const hide = () => {\n        setVisible(false);\n    };\n    const handleVisibleChange = (data) => {\n        setVisible(data);\n    };\n    //修改子区名称\n    const [isModalVisible, setIsModalVisible] = useState(\"\");\n    const showModal = (op) => {\n        setIsModalVisible(op);\n        if (op === \"editThread\") {\n            setNameValue(currentThreadInfo.name);\n        }\n    };\n\n    const handleOk = () => {\n        switch (isModalVisible) {\n            case \"editThread\":\n                if (nameValue === \"\") return;\n                WebIM.conn.changeChatThreadName({ chatThreadId: currentThreadInfo.id, name: nameValue }).then(res => {\n                    setNameValue(\"\");\n                }).catch(e => {\n                    message.warn({ content: \"名称编辑失败，请重试！\" });\n                })\n                break;\n            case \"leaveThread\":\n                WebIM.conn.leaveChatThread({ chatThreadId: currentThreadInfo.id }).then(() => {\n                    setThreadInfo({});\n                    handleThreadPanel(false);\n                    if (threadId) {\n                        navigate(`/main/channel/${serverId}/${channelId}`);\n                    }\n                }).catch(e => {\n                    message.warn({ content: \"离开子区失败，请重试！\" });\n                })\n                break;\n            case \"destroyThread\":\n                WebIM.conn.destroyChatThread({ chatThreadId: currentThreadInfo.id }).then(() => {\n                    deleteLocalThread(channelId, currentThreadInfo.id).then(() => {\n                        setThreadInfo({});\n                        handleThreadPanel(false);\n                        if (threadId) {\n                            navigate(`/main/channel/${serverId}/${channelId}`);\n                        }\n                    })\n                }).catch(e => {\n                    message.warn({ content: \"删除子区失败，请重试！\" });\n                })\n                break;\n            default:\n                break;\n        }\n        setIsModalVisible(\"\");\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(\"\");\n    };\n    const [nameValue, setNameValue] = useState('');\n    const changeNickname = (e) => {\n        setNameValue(e.target.value);\n    }\n\n    const getChannelInfo = ({ serverId, channelId }) => {\n        WebIM.conn.getChannelDetail({ serverId, channelId }).then((res) => {\n            setChannelInfo(res.data);\n        });\n    };\n    useEffect(() => {\n        getChannelInfo({\n            serverId,\n            channelId\n        });\n    }, [channelId, serverId]);\n\n    //thread信息\n    const getThreadInfo = (chatThreadId) => {\n        //get currentThreadInfo\n        WebIM.conn.getChatThreadDetail({ chatThreadId }).then((res) => {\n            //从thread列表点击，需要查询本地消息\n            let findMsg = getThreadParentMsg(res.data.parentId, res.data.messageId)\n            let parentMessage = findMsg ? { ...findMsg, chatThreadOverview: {} } : {};\n            setThreadInfo({ ...res.data, parentMessage });\n        });\n    }\n    useEffect(() => {\n        threadId && getThreadInfo(threadId);\n    }, []);\n\n    //跳转到channel\n    const goToChannel = () => {\n        navigate(`/main/channel/${serverId}/${channelId}`);\n        const tempInfo = { ...currentThreadInfo }\n        setTimeout(() => {\n            setThreadInfo(tempInfo)\n            handleThreadPanel(true);\n        }, 500);\n    }\n    const nameRef = createRef();\n    useEffect(() => {\n        if (isModalVisible && isModalVisible === \"editThread\") {\n            setTimeout(() => {\n                nameRef && nameRef.current.focus();\n            }, 500)\n        }\n    }, [isModalVisible])\n    return (\n        <div className={s.layout}>\n            {isCreatingThread ? <div className={s.createCon}>创建子区</div> : <div className={s.threadBar}>\n                <div className={s.nameCon}>\n                    {threadId && <div className={s.channelInfo} onClick={goToChannel}>\n                        <span className={s.iconCon}>\n                            <Icon name={channelInfo?.isPublic ? \"hashtag\" : \"hashtag_lock\"} size=\"26px\" color=\"rgba(255, 255, 255, 0.74)\" />\n                        </span>\n                        <span className={s.name}>{channelInfo?.name}</span>\n                        <hr className={s.line} />\n                    </div>}\n                    <div className={s.threadInfo}>\n                        <span className={s.iconCon}>\n                            <Icon name=\"hashtag_message\" size=\"26px\" color={threadId ? \"#fff\" : \"rgba(255, 255, 255, 0.74)\"} />\n                        </span>\n                        <span className={s.name}>{currentThreadInfo?.name}</span>\n                    </div>\n\n                </div>\n                <Dropdown overlay={menu(role)} placement=\"bottomLeft\" trigger={['click']} overlayClassName=\"circleDropDown\">\n                    <div className={s.editIcon}>\n                        <Icon name=\"ellipsis\" size=\"22px\" color=\"rgba(255, 255, 255, 0.74)\" />\n                    </div>\n                </Dropdown>\n\n            </div>}\n            {!threadId && <span className={s.close} onClick={() => { handleThreadPanel(false); setThreadInfo({}) }}>\n                <Icon name=\"xmark\" size=\"18px\" color=\"rgba(255, 255, 255, 0.74)\"></Icon>\n            </span>}\n            <div className={s.membersCon}>\n                <Popover content={<ThreadMember close={hide} visible={visible} />} placement=\"bottomRight\" trigger=\"click\" visible={visible} onVisibleChange={handleVisibleChange} overlayClassName={s.threadMember}>\n                </Popover>\n            </div>\n            <Modal className={`userInfoModal`} destroyOnClose={true} title=\"编辑子区\" visible={isModalVisible === \"editThread\"} onCancel={handleCancel} footer={null} closeIcon={<CloseIcon />}>\n                <div className={s.updateNickname}>\n                    <span className={s.title}>子区名称</span>\n                    <div className={s.updateCon}>\n                        <input ref={nameRef} className={s.input} value={nameValue} maxLength={64} onChange={(e) => changeNickname(e)} placeholder={currentThreadInfo?.name}></input>\n                        <span className={s.count}>{nameValue.length}/64</span>\n\n                    </div>\n                    <div className={`circleBtn circleBtn106 ${s.confirm} ${nameValue === \"\" ? \"disable\" : null}`} onClick={handleOk}>确认</div>\n                </div>\n            </Modal>\n            <Modal className={`logoutModal`} title={isModalVisible === \"leaveThread\" ? \"退出子区\" : \"删除子区\"} width={546} destroyOnClose={true} visible={isModalVisible === \"leaveThread\" || isModalVisible === \"destroyThread\"} onCancel={handleCancel} footer={null} closeIcon={<CloseIcon />}>\n                <div className={s.logoutCon}>\n                    {isModalVisible === \"leaveThread\" ? <span className={s.content}>确认退出子区<span className={s.name}>&nbsp;{currentThreadInfo?.name}</span></span> : <span className={s.content}>确认删除子区<span className={s.name}>{currentThreadInfo?.name}？</span>本操作不可恢复。</span>}\n\n                    <div className={s.buttons}>\n                        <div className={`circleBtn106 circleBtnGray`} onClick={handleCancel}>取消</div>\n                        <div className={`circleBtn106 circleBtn ${s.confirm}`} onClick={handleOk}>确认</div>\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    );\n};\nconst mapStateToProps = ({ app, thread }) => {\n    return {\n        serverRole: app.serverRole,\n        channelInfo: app.currentChannelInfo,\n        currentThreadInfo: thread.currentThreadInfo,\n        isCreatingThread: thread.isCreatingThread,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleThreadPanel: (params) => {\n            return dispatch({\n                type: \"thread/setThreadPanelStatus\",\n                payload: params\n            })\n        },\n        setThreadInfo: (params) => {\n            return dispatch({\n                type: \"thread/setThreadInfo\",\n                payload: params\n            })\n        },\n        setChannelInfo: (params) => {\n            return dispatch({\n                type: \"app/setCurrentChannelInfo\",\n                payload: params\n            })\n        }\n    };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ThreadHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__QOryQ\",\"nameCon\":\"index_nameCon__u+-50\",\"icon1\":\"index_icon1__rWG6l\",\"name\":\"index_name__Dt9lU\",\"inputCon\":\"index_inputCon__TwESK\",\"t\":\"index_t__dWsGP\",\"input\":\"index_input__OA5EM\",\"del\":\"index_del__nHuqx\",\"b\":\"index_b__+TCo-\",\"light\":\"index_light__hR1bJ\"};","import React, { memo, useState, useRef, useEffect } from \"react\";\nimport s from \"./index.module.less\";\nimport Icon from \"@/components/Icon\";\nimport { connect } from \"react-redux\";\n\nconst ThreadName = (props) => {\n    const { isCreatingThread, currentThreadInfo, setName } = props;\n    const nameEle = useRef();\n    const [inputVal, setInputVal] = useState(isCreatingThread ? \"\" : currentThreadInfo?.name);\n    useEffect(() => {\n        isCreatingThread && inputVal === \"\" && nameEle.current && nameEle.current.focus();\n    }, [inputVal, isCreatingThread])\n    useEffect(() => {\n        setInputVal(currentThreadInfo?.name || \"\");\n    }, [currentThreadInfo])\n    return (\n        <div className={s.layout}>\n            {isCreatingThread ? <div className={s.inputCon}>\n                <div className={s.t}>\n                    <input ref={nameEle} maxLength=\"64\" className={s.input} placeholder=\"子区名（必填项）\" value={inputVal} onChange={(e) => { setInputVal(e.target.value); setName(e.target.value) }} />\n                    {inputVal.length !== 0 && <span className={s.del} onClick={() => { setInputVal(\"\");setName(\"\") }}>\n                        <Icon name=\"xmark_in_circle\" size=\"20px\" color=\"#666\" />\n                    </span>}\n                </div>\n                <div className={`${s.b} ${inputVal !== \"\" ? s.light : \"\"}`}>发送一条消息创建子区</div>\n            </div> : <div className={s.nameCon}>\n                <span className={s.icon1}><Icon name=\"hashtag_message\" size=\"26px\" color=\"#fff\" /></span>\n                <span className={s.name}>{currentThreadInfo?.name}</span>\n            </div>}\n        </div>\n    );\n};\nconst mapStateToProps = ({ channel, thread }) => {\n    return {\n        currentThreadInfo: thread.currentThreadInfo,\n        isCreatingThread: thread.isCreatingThread\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleThreadPanel: (params) => {\n            return dispatch({\n                type: \"thread/setThreadPanelStatus\",\n                payload: params\n            })\n        }\n    };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ThreadName));\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__0FLyk\",\"owner\":\"index_owner__-hu1V\",\"messageCon\":\"index_messageCon__ovo-7\",\"up\":\"index_up__80Zv4\",\"noMsg\":\"index_noMsg__B4Osv\",\"lineCon\":\"index_lineCon__ncljd\",\"line\":\"index_line__mXNBt\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\nimport MessageLeft from \"@/components/MessageLeft\";\nimport WebIM from \"@/utils/WebIM\";\nimport { connect } from \"react-redux\";\nimport { MESSAGE_ITEM_SOURCE } from \"@/consts\"\n\nconst OriginalMsg = (props) => {\n    const { isCreatingThread, currentThreadInfo, appUserInfo } = props;\n    const getName = (uid) => {\n        return appUserInfo[uid]?.nickname ? appUserInfo[uid].nickname : uid\n    }\n    return (\n        <div className={s.layout}>\n            <div className={s.owner}>创建者：{isCreatingThread ? getName(WebIM.conn.user) : getName(currentThreadInfo.owner)}</div>\n            {currentThreadInfo.parentMessage && JSON.stringify(currentThreadInfo.parentMessage) !== \"{}\" ? <div className={s.messageCon}>\n                <MessageLeft message={currentThreadInfo.parentMessage} source={MESSAGE_ITEM_SOURCE.threadParentMsg} />\n                <span className={s.up}>以上为原始消息</span>\n            </div> : <div className={s.noMsg}>抱歉，无法加载原始消息</div>}\n            <div className={s.lineCon}>\n                <hr className={s.line} />\n            </div>\n        </div>\n    );\n};\nconst mapStateToProps = ({ app, channel, thread }) => {\n    return {\n        currentThreadInfo: thread.currentThreadInfo,\n        isCreatingThread: thread.isCreatingThread,\n        appUserInfo: app.appUserInfo\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleThreadPanel: (params) => {\n            return dispatch({\n                type: \"thread/setThreadPanelStatus\",\n                payload: params\n            })\n        }\n    };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(OriginalMsg));\n\n","import React, { memo, useState, useMemo, useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport s from \"./index.module.less\";\nimport ThreadHeader from \"./components/Header\"\nimport ThreadName from \"./components/Name\"\nimport OriginalMsg from \"./components/OriginalMsg\"\nimport Input from \"@/components/Input\";\nimport MessageLeft from \"@/components/MessageLeft\";\nimport { CHAT_TYPE, MESSAGE_ITEM_SOURCE } from \"@/consts\";\nimport { useParams } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getThreadHistoryMessage } from \"@/utils/common\"\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { recallMessage } from \"@/utils/common\";\n\nconst SCROLL_WARP_ID = \"threadMessageScrollId\";\nconst ThreadPanel = (props) => {\n    const { threadMessage, threadHasHistory, currentThreadInfo } = props;\n    const { channelId } = useParams();\n    const [threadName, setThreadName] = useState(\"\");\n    const messageList = useMemo(() => {\n        return currentThreadInfo?.id && threadMessage.get(currentThreadInfo.id) ? threadMessage.get(currentThreadInfo.id) : []\n    }, [currentThreadInfo, threadMessage]);\n    useEffect(() => {\n        if (currentThreadInfo && currentThreadInfo?.id) {\n            setThreadName(\"\");\n            const dom = scrollThreadEl.current;\n            if (!ReactDOM.findDOMNode(dom)) return;\n            dom.scrollTop = 0;\n        }\n        if (currentThreadInfo?.id && currentThreadInfo.source !== 'notify') {\n            getThreadHistoryMessage(currentThreadInfo.id)\n        }\n    }, [currentThreadInfo?.id])\n    //滚动加载\n    const scrollThreadEl = useRef(null);\n    const loadMoreData = () => {\n        getThreadHistoryMessage(currentThreadInfo.id, true)\n    }\n    //收到新消息滚动（滚动条滚动前提：没有历史记录）\n    useEffect(() => {\n        const dom = scrollThreadEl.current;\n        if (!ReactDOM.findDOMNode(dom)) return;\n        if (threadHasHistory === false && messageList.length !== 0 && dom.scrollHeight >= (dom.scrollTop + dom.clientHeight)) {\n            setTimeout(()=>{\n                dom.scrollTop = dom.scrollHeight;\n            },300)\n        }\n    }, [messageList.length])\n\n    //消息操作\n    const handleOperation = (op, isThreadMessage = false, data) => {\n        switch (op) {\n            case \"recall\":\n                recallMessage(data, isThreadMessage);\n                break;\n            default:\n                break;\n        }\n    };\n    return (\n        <div className={s.layout}>\n            <ThreadHeader />\n            <div className={s.contentWrap}>\n                <div id={SCROLL_WARP_ID} className={s.messageWrap} ref={scrollThreadEl}>\n                    <InfiniteScroll\n                        dataLength={messageList.length || 0}\n                        next={loadMoreData}\n                        hasMore={threadHasHistory}\n                        loader={<></>}\n                        endMessage={<></>}\n                        scrollableTarget={SCROLL_WARP_ID}\n                    >\n                        <ThreadName setName={(name) => { setThreadName(name) }} />\n                        <OriginalMsg />\n                        {messageList && messageList.length > 0 && messageList.map((item) => {\n                            return (\n                                <div key={item.id} className={s.messageItem}>\n                                    <MessageLeft message={item} isThreadMessage={true} parentId={channelId} source={MESSAGE_ITEM_SOURCE.threadChat} onHandleOperation={handleOperation} />\n                                </div>\n                            );\n                        })}\n                    </InfiniteScroll>\n                </div>\n                <div className={s.iptWrap}>\n                    <Input chatType={CHAT_TYPE.groupChat} isThread={true} fromId={channelId} threadName={threadName} />\n                </div>\n            </div>\n        </div>\n    );\n};\nconst mapStateToProps = ({ thread }) => {\n    return {\n        threadCursor: thread.threadCursor,\n        threadMessage: thread.threadMessage,\n        threadHasHistory: thread.threadHasHistory,\n        currentThreadInfo: thread.currentThreadInfo\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleThreadPanel: (params) => {\n            return dispatch({\n                type: \"thread/setThreadPanelStatus\",\n                payload: params\n            })\n        }\n    };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ThreadPanel));\n\n"],"names":["BasicInfo","props","online","name","showOnline","className","style","memo","CloseIcon","s","Icon","color","size","MemberItem","info","uid","operationReactNode","handlerHover","borderType","basicShowOnline","memberItemRef","useRef","useState","selected","setSelected","useEffect","onClick","e","dom","current","contains","target","document","addEventListener","removeEventListener","onMouseOver","onMouseLeave","AvatarInfo","nickname","src","avatarurl","ref","THREAD_OPERATION","id","iconName","getOperationEl","opList","cb","itemList","forEach","item","push","key","label","iconClass","items","SCROLL_WARP_ID","connect","app","thread","appUserInfo","currentThreadInfo","close","visible","memberList","setMemberList","hasMore","setHasMore","memberCursor","setMemberCursor","getThreadMember","cursor","WebIM","chatThreadId","pageSize","then","res","properties","getUsersInfo","data","affiliations","length","dataLength","next","loader","endMessage","scrollableTarget","map","index","showLine","serverRole","channelInfo","currentChannelInfo","isCreatingThread","dispatch","handleThreadPanel","params","type","payload","setThreadInfo","setChannelInfo","navigate","useNavigate","useParams","serverId","channelId","threadId","role","handleOperation","handleVisibleChange","showModal","setVisible","isModalVisible","setIsModalVisible","op","setNameValue","handleOk","nameValue","catch","message","content","deleteLocalThread","handleCancel","getChannelInfo","findMsg","getThreadParentMsg","parentId","messageId","parentMessage","chatThreadOverview","nameRef","createRef","setTimeout","focus","tempInfo","isPublic","overlay","USER_ROLE","owner","menu","placement","trigger","overlayClassName","onVisibleChange","destroyOnClose","title","onCancel","footer","closeIcon","value","maxLength","onChange","changeNickname","placeholder","width","channel","setName","nameEle","inputVal","setInputVal","getName","JSON","stringify","MessageLeft","source","MESSAGE_ITEM_SOURCE","threadCursor","threadMessage","threadHasHistory","threadName","setThreadName","messageList","useMemo","get","scrollThreadEl","ReactDOM","scrollTop","getThreadHistoryMessage","scrollHeight","clientHeight","isThreadMessage","recallMessage","onHandleOperation","Input","chatType","CHAT_TYPE","isThread","fromId"],"sourceRoot":""}