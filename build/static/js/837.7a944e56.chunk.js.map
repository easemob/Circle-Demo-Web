{"version":3,"file":"static/js/837.7a944e56.chunk.js","mappings":"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","sources":["webpack://circle/./src/components/Number/index.module.less?4342","components/Number/index.js","webpack://circle/./src/layout/Contacts/index.module.less?39bb","webpack://circle/./src/layout/Contacts/SideBar/index.module.less?3590","layout/Contacts/SideBar/index.js","layout/Contacts/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"number\":\"index_number__Kwgx1\"};","import styles from \"./index.module.less\";\nimport React, { memo } from \"react\";\n\nconst Number = (props) => {\n    const { number, style = {} } = props\n    return (\n        <span className={styles.number} style={{...style}}>{number < 100 ? number : '99+'}</span>\n    );\n};\n\nexport default memo(Number);\n","// extracted by mini-css-extract-plugin\nexport default {\"contentWrap\":\"index_contentWrap__9g0Lr\"};","// extracted by mini-css-extract-plugin\nexport default {\"sideBarWrap\":\"index_sideBarWrap__veWbj\",\"topBar\":\"index_topBar__4CdOT\",\"bar\":\"index_bar__72zmE\",\"active\":\"index_active__Oqxfn\",\"contacts\":\"index_contacts__gQsWs\",\"personIcon\":\"index_personIcon__Bt1eq\",\"contactsText\":\"index_contactsText__4BrXO\",\"title\":\"index_title__HZDJl\",\"list\":\"index_list__ungZO\",\"contactsItem\":\"index_contactsItem__-x37v\",\"item\":\"index_item__BK1P2\",\"empty\":\"index_empty__vWykB\"};","import React, { memo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport s from \"./index.module.less\";\nimport Number from \"@/components/Number\";\nimport AvatarInfo from \"@/components/AvatarInfo\";\nimport WebIM from \"@/utils/WebIM\";\nimport { getUsersInfo } from \"@/utils/common\";\nimport Icon from \"@/components/Icon\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { CHAT_TYPE } from \"@/consts\";\n\nconst SideBar = (props) => {\n  const { applyNum, chatMap, conversationData, appUserInfo, setConversationList, setUnReadNumber } = props;\n  const navigate = useNavigate();\n\n  const { userId } = useParams();\n\n  const toChat = (uid) => {\n    navigate(`/main/contacts/chat/${uid}`);\n  };\n\n  const toContacts = () => {\n    navigate(`/main/contacts/index`);\n  };\n  const getUnReadNum = (id) => {\n    return chatMap[CHAT_TYPE.single]?.get(id)?.unReadNum || 0;\n  }\n\n  useEffect(() => {\n    if (conversationData.length > 0) return;\n    WebIM.conn.getConversationlist().then((res) => {\n      const { channel_infos } = res.data;\n      const conversationList = [];\n      channel_infos &&\n        channel_infos.forEach((element) => {\n          const { channel_id } = element;\n          if (channel_id.indexOf(\"@conference.easemob.com\") <= -1) {\n            const idStr = channel_id.split(\"_\")[1];\n            const username = idStr.substring(0, idStr.indexOf(\"@easemob.com\"));\n            conversationList.push(username);\n            if (element.unread_num > 0) {\n              setUnReadNumber({\n                chatType: CHAT_TYPE.single,\n                fromId: username,\n                number: element.unread_num,\n              })\n            }\n          }\n        });\n      conversationList.length > 0 && getUsersInfo(conversationList);\n      setConversationList(conversationList);\n    });\n  }, []);\n  return (\n    <div className={s.sideBarWrap}>\n      <div className={s.topBar}>\n        <div\n          className={!userId ? `${s.bar} ${s.active}` : `${s.bar}`}\n          onClick={toContacts}\n        >\n          <div className={`${s.contacts}`}>\n            <span className={s.personIcon}><Icon name=\"person_2\" size=\"26px\" /></span>\n            <span className={s.contactsText}>我的好友</span>\n          </div>\n          {applyNum > 0 && <Number number={applyNum} />}\n        </div>\n      </div>\n      <div className={s.title}>我的消息</div>\n      <div className={s.list}>\n        {conversationData?.length > 0 ?\n          conversationData.map((item, index) => {\n            return (\n              <div\n                className={`${s.bar} ${s.contactsItem} ${index !== 0 ? s.item : \"\"\n                  } ${userId === item ? s.active : \"\"}`}\n                key={index}\n                onClick={() => {\n                  toChat(item);\n                }}\n              >\n                <div className={s.contacts}>\n                  <AvatarInfo\n                    size={36}\n                    src={appUserInfo[item]?.avatarurl}\n                    online={appUserInfo[item]?.online || 0}\n                  />\n                  <span className={s.contactsText}>{appUserInfo[item]?.nickname || item}</span>\n                </div>\n                {getUnReadNum(item) > 0 && (\n                  <Number number={getUnReadNum(item)} />\n                )}\n              </div>\n            );\n          }) : <div className={s.empty}>您还没有会话</div>}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ app, contact }) => {\n  return {\n    appUserInfo: app.appUserInfo,\n    chatMap: app.chatMap,\n    applyNum: contact.applyInfo.length,\n    conversationData: contact.conversationList\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setConversationList: (params) => {\n      return dispatch({\n        type: \"contact/setConversationList\",\n        payload: params\n      });\n    },\n    setUnReadNumber: (params) => {\n      return dispatch({\n        type: \"app/setUnReadNumber\",\n        payload: params\n      });\n    }\n  };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(SideBar));\n","import React, { memo } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport s from \"./index.module.less\";\nimport SideBar from \"./SideBar\";\n\nconst Content = () => {\n  return (\n    <div className={s.contentWrap}>\n      <SideBar />\n      <Outlet />\n    </div>\n  );\n};\n\nexport default memo(Content);\n"],"names":["Number","props","number","style","className","styles","memo","connect","app","contact","appUserInfo","chatMap","applyNum","applyInfo","length","conversationData","conversationList","dispatch","setConversationList","params","type","payload","setUnReadNumber","navigate","useNavigate","userId","useParams","getUnReadNum","id","CHAT_TYPE","get","unReadNum","useEffect","WebIM","then","res","channel_infos","data","forEach","element","channel_id","indexOf","idStr","split","username","substring","push","unread_num","chatType","fromId","getUsersInfo","s","onClick","Icon","name","size","map","item","index","AvatarInfo","src","avatarurl","online","nickname","Content"],"sourceRoot":""}