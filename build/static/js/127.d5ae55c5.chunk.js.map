{"version":3,"file":"static/js/127.d5ae55c5.chunk.js","mappings":"mJACA,EAA6B,0B,SCEvBA,EAAa,SAACC,GAClB,IAAQC,EAAyBD,EAAzBC,SAAR,EAAiCD,EAAfE,MAAAA,OAAlB,MAA0B,CAAC,EAA3B,EACA,OACE,gBAAKC,UAAWC,EAAcF,MAAOA,EAArC,SACGD,GAGN,EAED,GAAeI,EAAAA,EAAAA,MAAKN,E,gHCXpB,EAA8B,2BAA9B,EAAuE,2BAAvE,EAAgH,2BAAhH,EAAqJ,uBAArJ,EAAmL,oBAAnL,EAA8M,oBAA9M,EAA+O,0BAA/O,EAAsR,0BAAtR,EAAuT,oBAAvT,EAA0V,4BAA1V,EAAsY,6BAAtY,EAA6a,uBAA7a,EAA6c,sBAA7c,EAA2e,qB,UCA3e,GAAgB,KAAO,oBAAoB,KAAO,oBAAoB,QAAU,uBAAuB,QAAU,uBAAuB,KAAO,oBAAoB,QAAU,uBAAuB,QAAU,wB,sECA9M,EAAyB,sBAAzB,EAA8D,4BAA9D,EAAwG,2BAAxG,EAAgJ,0BAAhJ,EAAiL,oBAAjL,EAAmN,2BAAnN,EAAsP,qBAAtP,EAA+S,oBAA/S,EAA6U,uBAA7U,EAA+W,wBAA/W,EAAoZ,0BAApZ,EAA0b,yBAA1b,EAA6d,uBAA7d,EAA6f,sBAA7f,EAA+hB,yBAA/hB,EAAkkB,uBAAlkB,EAAqmB,yBAArmB,EAAwoB,uBAAxoB,EAA0qB,wB,kFCUpqBO,GAAiB,qBAqHjBC,GAAoB,SAACC,GACvB,GAA0B,IAAtBA,EAAWC,OAAc,OACzB,iBAAKN,UAAWC,EAAhB,UACI,kBAAKD,UAAWC,EAAhB,WAAyB,kBAAMD,UAAU,kBAAzC,2CAIX,EAuBD,IAAeE,EAAAA,EAAAA,OAAKK,EAAAA,EAAAA,KAtBI,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACvB,MAAO,CACHC,WAAYD,EAAIC,WAChBC,YAAaF,EAAIE,YAExB,IAE0B,SAACC,GACxB,MAAO,CACHC,kBAAmB,SAACC,GAChB,OAAOF,EAAS,CACZG,KAAM,8BACNC,QAASF,GAEhB,EACDG,cAAe,SAACH,GACZ,OAAOF,EAAS,CACZG,KAAM,wBAEb,EAER,GACmBP,EAjJD,SAACV,GAChB,IAAQY,EAAuEZ,EAAvEY,WAAYC,EAA2Db,EAA3Da,YAAaO,EAA8CpB,EAA9CoB,kBAAmBC,EAA2BrB,EAA3BqB,QAASC,EAAkBtB,EAAlBsB,cAC7D,GAAgCC,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACZC,EAAOd,EAAWY,GACxB,GAAoCG,EAAAA,EAAAA,UAAS,IAA7C,eAAOnB,EAAP,KAAmBoB,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACFP,EACAQ,EAAeJ,GAEfK,EAAoB,GAE3B,GAAE,CAACL,EAAMJ,IACV,OAA8BK,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAgDN,EAAAA,EAAAA,UAAS,MAAzD,eAAOO,EAAP,KAAyBH,EAAzB,KAIMD,EAAiB,SAACJ,GAAuB,IAAjBS,EAAgB,uDAAP,GAC7BC,EAAmB,SAATV,EAAkB,iBAAmB,uBACjDW,EAAa,CACbC,SAAUb,EACVc,SAvBE,GAwBFJ,OAAAA,GAEJK,EAAAA,EAAAA,KAAWJ,GAASC,GAAYI,MAAK,SAACC,GAClC,IAAMC,EAAOD,EAAIE,SACjB,GAAoB,IAAhBD,EAAKlC,OAAT,CA5BE,KAkCYkC,EAAKlC,OACfwB,GAAW,GAEXA,GAAW,GAEfF,EAAoBW,EAAIG,WAAWV,QACnC,IAAMW,EAAgBH,EAAKI,KAAI,SAACC,GAAD,OAAUA,EAAKC,EAAf,IAC/BT,EAAAA,EAAAA,KAAAA,yBAAoC,CAAEM,cAAAA,IAAiBL,MAAK,SAACC,GACzD,IAAMQ,EAAUR,EAAIE,SACpBD,EAAKQ,SAAQ,SAACH,GACV,IAAII,EAAQF,EAAQG,MAAK,SAAAC,GAAO,OAAIN,EAAKC,KAAOK,EAAQC,YAAxB,IAChCP,EAAKQ,YAAcJ,GAASA,EAAMI,YAAcJ,EAAMI,YAAc,CAAC,CACxE,IACyB5B,EAAL,KAArBM,EAAwCS,EAAsB,GAAD,eAAKnC,IAAL,OAAoBmC,IACpF,IAAEc,OAAM,WACqB7B,EAAL,KAArBM,EAAwCS,EAAsB,GAAD,eAAKnC,IAAL,OAAoBmC,IACpF,GAjBA,MAJQN,EAAWqB,UACZ9B,EAAce,EAqBzB,GACJ,EAMKgB,EAAgB,SAACC,GACnB,OAAQA,EAAQ3C,MACZ,IAAK,MACD,OAAO2C,EAAQC,IACnB,IAAK,OACD,MAAM,eACV,IAAK,MACD,MAAM,eACV,QACI,MAAO,GAElB,EACD,OACI,kBAAK1D,UAAWC,EAAhB,WACI,kBAAKD,UAAWC,EAAhB,WACI,kBAAMD,UAAWC,EAAjB,uCACA,iBAAKD,UAAWC,EAAc0D,QAAS,kBAAMzC,GAAN,EAAvC,UACI,UAAC0C,GAAA,EAAD,UAGR,iBAAId,GAAI3C,GAAgBH,UAAWC,EAAnC,UACKG,GAAkBC,IACnB,UAAC,KAAD,CACIwD,WAAYxD,EAAWC,QAAU,EACjCwD,KAlEK,WACjBnC,EAAeJ,EAAMQ,EACxB,EAiEeF,QAASA,EACTkC,QAAQ,0BACRC,YAAY,0BACZC,iBAAkB9D,GANtB,SAQKE,EAAWC,OAAS,GAAKD,EAAWuC,KAAI,SAACsB,EAAQC,GAAW,IAAD,UACxD,OACI,gBAAInE,UAAWC,EAAoB0D,QAAS,SAACS,GAAD,OArC5C,SAACF,GACrBjD,EAAkB,mBAAmB,EAAMiD,EAAQ,cACnDhD,GACH,CAkC0EmD,CAAgBH,EAAvB,EAA5C,UACI,kBAAKlE,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,SAA6BiE,EAAOI,OACnCJ,EAAOb,aAAsD,OAAvCkB,KAAKC,UAAUN,EAAOb,cACzC,kBAAKrD,UAAWC,EAAhB,WACI,kBAAKD,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,UAA0B,UAACwE,EAAA,EAAD,CAAYC,KAAM,GAAIC,IAAG,UAAEjE,EAAW,UAACwD,EAAOb,mBAAR,aAAC,EAAoBuB,aAAlC,aAAE,EAAuCC,eAC5F,iBAAK7E,UAAWC,EAAhB,UACI,kBAAMD,UAAWC,EAAjB,UAA+B,UAAAS,EAAW,UAACwD,EAAOb,mBAAR,aAAC,EAAoBuB,aAAhC,eAAuCE,WAClEZ,EAAOb,YAAYuB,SAE1BV,EAAOb,cAAe,iBAAKrD,UAAWC,EAAhB,UAA2B,kBAAMD,UAAWC,EAAjB,UAA6B8E,EAAAA,EAAAA,IAAUvB,EAAcU,EAAOb,sBAClH,kBAAMrD,UAAWC,EAAjB,UAA8B+E,EAAAA,EAAAA,IAAW,UAACd,EAAOb,mBAAR,aAAC,EAAoB4B,YACzD,iBAAKjF,UAAWC,EAAhB,UACL,kBAAMD,UAAWC,EAAjB,8DAdYkE,EAmBnC,WAKpB,KClHKe,GAAgB,SAACrF,GACrB,IACEoB,EAQEpB,EARFoB,kBACAK,EAOEzB,EAPFyB,UACAD,EAMExB,EANFwB,SACA8D,EAKEtF,EALFsF,eACAC,EAIEvF,EAJFuF,YACA3E,EAGEZ,EAHFY,WACA4E,EAEExF,EAFFwF,iBACAC,EACEzF,EADFyF,qBAGF,GAA0C9D,EAAAA,EAAAA,WAAS,GAAnD,eAAOL,EAAP,KAAsBoE,EAAtB,KACMC,EAAW/E,EAAWY,IAc5BK,EAAAA,EAAAA,YAAU,YAba,SAAC,GAA6B,IAA3BL,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAClCe,EAAAA,EAAAA,KAAAA,iBAA4B,CAAEhB,SAAAA,EAAUC,UAAAA,IAAagB,MAAK,SAACC,GACzD4C,EAAe5C,EAAIkD,KACpB,GACF,CAUCC,CAAe,CACbrE,SAAAA,EACAC,UAAAA,GAEH,GAAE,CAACA,EAAWD,IAEf,IAAIsE,GAAWC,EAAAA,EAAAA,MAcf,OACE,WAAChG,EAAA,EAAD,YACE,kBAAMI,UAAS,UAAKC,EAAAA,KAAL,YAA0B,OAAXmF,QAAW,IAAXA,GAAAA,EAAaS,SAAb,UACrB5F,EAAAA,gBADqB,YACAA,EAAAA,KADA,eAErBA,EAAAA,gBAFqB,YAEAA,EAAAA,UAF9B,gBAGImF,QAHJ,IAGIA,OAHJ,EAGIA,EAAad,QACjB,kBAAKtE,UAAWC,EAAAA,QAAhB,WACE,UAAC,IAAD,CACE6F,UAAU,cACVC,SACE,UAAC,GAAD,CACE7E,QAvCW,WACrBqE,GAAiB,EAClB,EAsCWtE,kBAAmBA,EACnBE,cAAeA,IAGnB6E,QAAQ,QACRC,QAAS9E,EACT+E,gBA3C8B,SAACC,GACrCZ,EAAiBY,EAClB,EA0COC,iBAAkBnG,EAAAA,QAZpB,UAcE,UAAC,IAAD,CAASoG,MAAM,2BAAOD,iBAAiB,UAAvC,UACE,4BACE,UAACE,EAAA,EAAD,CAAMC,UAAWtG,EAAAA,KAAQyE,KAAK,OAAOJ,KAAK,8BAIhD,UAAC,IAAD,CAAS+B,MAAOf,EAAuB,uCAAW,uCAAUc,iBAAiB,UAA7E,UACE,iBACEzC,QAAS,WACP1C,EAAkB,aACnB,EAHH,UAKE,UAACqF,EAAA,EAAD,CAAMC,UAAWtG,EAAAA,KAAQyE,KAAK,OAAOJ,KAAK,iBAG7CkB,GAAYA,IAAagB,EAAAA,GAAAA,OACxB,UAAC,IAAD,CAASH,MAAM,2BAAOD,iBAAiB,UAAvC,UACE,iBACEzC,QAAS,WACP1C,EAAkB,UACnB,EAHH,UAKE,UAACqF,EAAA,EAAD,CAAMC,UAAWtG,EAAAA,KAAQyE,KAAK,OAAOJ,KAAK,aAIhB,IAA/Bc,EAAYqB,gBAAwBjB,GAAYA,IAAagB,EAAAA,GAAAA,QAC5D,UAAC,IAAD,CACE7C,QA9DU,SAACS,GACL,kBAAVA,EAAEsC,KACJrE,EAAAA,EAAAA,KAAAA,eAA0B,CAAEhB,SAAAA,EAAUC,UAAAA,IAAagB,MAAK,YACtDqE,EAAAA,EAAAA,IAAmBtF,EAAUC,GAAW,GACxC,IAAMkB,EAAO6C,EAAiB7C,MAAQ,GAChCoE,EAAYpE,EAAKoE,WAAU,SAAA/D,GAAI,OAAIA,EAAKC,KAAOzB,CAAhB,IACrC,GAAIuF,GAAa,EAAG,CAClB,IAAMC,EAAmBrE,EAAKoE,GAAWC,iBACzClB,EAAS,iBAAD,OAAkBtE,EAAlB,YAA8BwF,GACvC,CACF,GAEJ,EAmDS9G,MAAO,CAAE+G,QAAS,GAClBC,MAAO,OACPC,YAAY,EACZC,qBAAqB,QACrBC,KAAK,aACLC,MAAOC,YAOlB,EACKA,GAAkB,WACtB,MAAO,CACL,CACEC,OACE,iBAAKrH,UAAWC,EAAAA,QAAhB,UACE,UAACqG,EAAA,EAAD,CAAMC,UAAWtG,EAAAA,KAAQqE,KAAK,WAAWI,KAAK,WAGlDgC,IAAK,UACL5G,SAAU,CACR,CACEuH,OACE,kBAAKrH,UAAWC,EAAAA,SAAhB,WACE,UAACqG,EAAA,EAAD,CAAMhC,KAAK,QAAQI,KAAK,UACxB,2DAGJgC,IAAK,mBAKd,EAqBD,IAAenG,EAAAA,EAAAA,KApBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,IAAK8G,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtC,MAAO,CACLnC,YAAa5E,EAAIgH,mBACjB/G,WAAYD,EAAIC,WAChB4E,iBAAkBiC,EAAOjC,iBACzBC,qBAAsBiC,EAAQjC,qBAEjC,IAE0B,SAAC3E,GAC1B,MAAO,CACLwE,eAAgB,SAACtE,GACf,OAAOF,EAAS,CACdG,KAAM,4BACNC,QAASF,GAEZ,EAEJ,GAED,EAGEX,EAAAA,EAAAA,MAAKgF,KCxKP,IAAgB,KAAO,oBAAoB,OAAS,sBAAsB,KAAO,oBAAoB,WAAa,0BAA0B,QAAU,wBCAtJ,GAA4B,yB,WCItBuC,GAAc,SAAC5H,GACnB,IAAQoG,EAAuCpG,EAAvCoG,QAASyB,EAA8B7H,EAA9B6H,SAAU5H,EAAoBD,EAApBC,SAAUuG,EAAUxG,EAAVwG,MACrC,OACE,iBAAKrG,UAAWC,GAAhB,UACE,UAAC,KAAD,CACE0H,MAAM,OACN5H,MAAO,CAAE6H,IAAK,GACdC,cAAc,EACdxB,MAAOA,EACPJ,QAASA,EACT6B,MAAM,EACNC,QAAQ,EACRC,gBAAgB,EAChBN,SAAU,WACRA,GACD,EACDO,WAAW,UAACrE,GAAA,EAAD,IAZb,SAcG9D,KAIR,EAED,IAAeI,EAAAA,EAAAA,MAAKuH,I,qBC5BpB,GAAuB,oBAAvB,GAAqD,uBAArD,GAAoF,qBAApF,GAAmH,uBAAnH,GAAqJ,wBCqErJ,IAAevH,EAAAA,EAAAA,OAAKK,EAAAA,EAAAA,IAAQ,MAVD,SAACI,GAC1B,MAAO,CACLuH,YAAa,SAACrH,GACZ,OAAOF,EAAS,CACdG,KAAM,qBACNC,QAASF,GAEZ,EAEJ,GACmBN,EA9DF,SAAC,GAUZ,IATLgB,EASI,EATJA,KACA4G,EAQI,EARJA,IACA9G,EAOI,EAPJA,SAOI,IANJ+G,WAAAA,OAMI,aALJC,UAAAA,OAKI,MALQ,GAKR,EAJJC,EAII,EAJJA,WACAJ,EAGI,EAHJA,YACAK,EAEI,EAFJA,SAEI,IADJC,YAAAA,OACI,MADU,WAAS,EACnB,EACE7C,GAAWC,EAAAA,EAAAA,MACX6C,EAAYlH,IAASiF,EAAAA,GAAAA,MAC3B,OACE,kBAAKxG,UAAWC,GAAhB,UACGsB,IAASiF,EAAAA,GAAAA,OACR,iBAAKxG,UAAS,UAAKC,GAAL,YAAewI,EAAYxI,GAAYA,GAAvC,KACZF,MAAO,CAAE2I,YAAaH,EAAW,OAAS,OAD5C,SAEGhH,IAASiF,EAAAA,GAAAA,MAAkB,qBAAQ,uBAGvC4B,IACC,iBACEpI,UAAS,UAAKuI,EAAW,OAAStI,IAClCF,MAAO,CAAE2I,YAAaH,EAAW,OAAS,OAC1C5E,QAAS,WACPuE,EAAY,YACZvC,EAAS,uBAAD,OAAwBwC,GACjC,EANH,UAQE,UAAC7B,EAAA,EAAD,CAAMC,UAAU,SAASjC,KAAK,uBAIjCgE,IACC,iBAAMtI,UAAS,UAAKuI,EAAW,OAAStI,IAAxC,UACE,UAAC,IAAD,CACE0D,QAAS,SAACS,GACRoE,EAAYpE,EAAG,CAAE+D,IAAAA,EAAK9G,SAAAA,GACvB,EACDtB,MAAO,CAAE+G,QAAS,GAClBC,MAAO,OACPC,YAAY,EACZC,qBAAqB,QACrBC,KAAK,aACLC,MAAOkB,QAMlB,KC1CKlI,GAAiB,mBAEjBwI,GAAQ,WACZ,OACE,UAAC/I,EAAA,EAAD,CAAYG,MAAO,CAAE6I,SAAU,QAASjB,MAAO,QAA/C,UACE,mBAAM3H,UAAS,UAAKC,GAAAA,KAAL,YAAeA,GAAAA,QAA9B,WAA0C,kBAAMD,UAAWC,GAAAA,OAAjB,UAA2B,UAACqG,EAAA,EAAD,CAAMhC,KAAK,WAAWuE,MAAM,OAAOnE,KAAK,WAA7G,+BAOL,EAEKoE,GAAqB,SAACC,EAAUvD,EAAU3C,GAC9C,IAAImG,EAAO,GACX,GAAIxD,IAAagB,EAAAA,GAAAA,OAAmBuC,IAAavC,EAAAA,GAAAA,KAAgB,OAAOwC,EACxE,GAAID,IAAavC,EAAAA,GAAAA,MAAiB,CAChC,IAAIyC,EAAQ,CAAC,EACTzD,IAAagB,EAAAA,GAAAA,KACfyC,EAAQ,CACN5B,OACE,6BACE,UAACf,EAAA,EAAD,CAAMhC,KAAK,aAAaI,KAAK,UAC7B,iEAGJgC,IAAK,YAEElB,IAAagB,EAAAA,GAAAA,YACtByC,EAAQ,CACN5B,OACE,6BACE,UAACf,EAAA,EAAD,CAAMhC,KAAK,gBAAgBI,KAAK,UAChC,iEAGJgC,IAAK,gBAGTsC,EAAKE,KAAKD,EACX,CAYD,OAXO,OAAJpG,QAAI,IAAJA,OAAA,EAAAA,EAAMsF,OAAQ9F,EAAAA,EAAAA,KAAAA,MACf2G,EAAKE,KAAK,CACR7B,OACE,6BACE,UAACf,EAAA,EAAD,CAAMhC,KAAK,kBAAkBI,KAAK,UAClC,2DAGJgC,IAAK,SAGFsC,CACR,EAEKG,GAAkB,SAACJ,EAAUvD,GAAX,MAAwB,CAC9C,CACE6B,OAAO,UAACf,EAAA,EAAD,CAAMC,UAAU,SAASjC,KAAK,aACrCoC,IAAK,UACL5G,SAAUgJ,GAAmBC,EAAUvD,IAJnB,EA8MxB,IAAetF,EAAAA,EAAAA,OAAKK,EAAAA,EAAAA,KA1BI,SAAC,GAA8B,IAA5BgH,EAA2B,EAA3BA,QAAS/G,EAAkB,EAAlBA,IAAK8G,EAAa,EAAbA,OACvC,MAAO,CACLrB,QAASsB,EAAQ6B,cACjB1I,YAAaF,EAAIE,YACjB2I,cAAe/B,EAAO+B,cACtB5I,WAAYD,EAAIC,WAEnB,IAE0B,SAACE,GAC1B,MAAO,CACL2I,WAAY,SAACzI,GACX,OAAOF,EAAS,CACdG,KAAM,qBACNC,QAASF,GAEZ,EACD0I,iBAAkB,SAAC1I,GACjB,OAAOF,EAAS,CACdG,KAAM,0BACNC,QAASF,GAEZ,EAEJ,GAEmBN,EAtMA,SAACV,GAAW,IAAD,IAE3BoG,EAMEpG,EANFoG,QACAqD,EAKEzJ,EALFyJ,WACA5I,EAIEb,EAJFa,YACA6I,EAGE1J,EAHF0J,iBACAF,EAEExJ,EAFFwJ,cACA5I,EACEZ,EADFY,WAGF,GAAgCW,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,SACF0H,GADN,EAAkBzH,UACDb,GAAcA,EAAWY,IACpCmI,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,OAAOJ,EAAcK,IAAIrI,IAAa,CAAC,CACxC,GAAE,CAACA,EAAUgI,IAGRM,EAAS,SAACxB,GAAS,IAAD,EAClByB,EAAE,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAkBhH,YAArB,aAAG,EAAwBqH,QAAO,SAAChH,GACvC,OAAOA,EAAKsF,MAAQA,CACrB,IACDoB,EAAiB,CACflI,SAAAA,EACAyI,cAAa,kBACRT,EAAcK,IAAIrI,IADX,IAEVmB,KAAMoH,KAGX,EAEKG,EAAiB,SAAC1I,EAAU8G,EAAK5G,GACrC,IAAMyI,GAAW,cAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBhH,OAAS,GAC5CyH,EAASD,EAASpD,WAAU,SAAC/D,GAC/B,OAAOA,EAAKsF,MAAQA,CACrB,IACD,GAAI8B,GAAU,EAAG,CACf,IAAI/G,GAAI,UAAQ8G,EAASC,IACzB/G,EAAK3B,KAAOA,EACZyI,EAASE,OAAOD,EAAQ,EAAG/G,GAC3BqG,EAAiB,CACflI,SAAAA,EACAyI,cAAa,kBACRT,EAAcK,IAAIrI,IADX,IAEVmB,KAAMwH,KAGX,CACF,EAEKxB,EAAc,SAACpE,EAAD,GAA2B,IAArB+D,EAAoB,EAApBA,IAAK9G,EAAe,EAAfA,SAC7B,GAAc,SAAV+C,EAAEsC,IACJrE,EAAAA,EAAAA,KAAAA,mBACsB,CAClBhB,SAAAA,EACA8I,OAAQhC,IAET7F,MAAK,WACJqH,EAAOxB,GACP1E,GAAAA,GAAAA,QAAgB,2BACjB,SACE,GAAc,aAAVW,EAAEsC,IAAoB,CAC/B,IAAI0D,EAAU,CACZ/I,SAAUA,EACV8I,OAAQhC,GAEV9F,EAAAA,EAAAA,KAAAA,eAA0B+H,GAAS9H,MAAK,WACtCyH,EAAe1I,EAAU8G,EAAK3B,EAAAA,GAAAA,UAC/B,GACF,MAAM,GAAc,gBAAVpC,EAAEsC,IAAuB,CAClC,IAAI0D,EAAU,CACZ/I,SAAUA,EACV8I,OAAQhC,GAEV9F,EAAAA,EAAAA,KAAAA,kBAA6B+H,GAAS9H,MAAK,WACzCyH,EAAe1I,EAAU8G,EAAK,OAC/B,GACF,CACF,EAEKkC,EAAmB,SAAC,GAAqB,IAAD,IAAlBrI,OAAAA,OAAkB,MAAT,GAAS,EAC5CK,EAAAA,EAAAA,KAAAA,iBACoB,CAChBhB,SAAUA,EACVe,SArJU,GAsJVJ,OAAAA,IAEDM,MAAK,SAACC,GACL,IAAM+H,EAAU/H,EAAIkD,KAAKjD,KAAKI,KAAI,SAACC,GAAD,OAAUA,EAAKsH,MAAf,IAE9BI,EAAehI,EAAIkD,KAAKjD,KAAKI,KAAI,SAACC,GACpC,MAAO,CACLtB,KAAMsB,EAAKtB,KACX4G,IAAKtF,EAAKsH,OAEb,IAEGP,EAAK,IAETY,EAAAA,EAAAA,IAAaF,GAGXV,EADa,KAAX5H,EACA,kBAAOwH,EAAiBhH,OAAxB,OAAiC+H,IAE9BA,EAGPhB,EAAiB,CACflI,SAAAA,EACAyI,aAAc,CACZtH,KAAMoH,EACN5H,OAAQO,EAAIkD,KAAKzD,OACjByI,UAAWlI,EAAIkD,KAAKjD,KAAKlC,SAG9B,GACJ,EAUD,OAJAoB,EAAAA,EAAAA,YAAU,WACRuE,GAAWoE,EAAiB,CAAErI,OAAQ,IACvC,GAAE,CAACiE,KAGF,UAAC,GAAD,CACEI,OAAO,UAACsC,GAAD,IACP1C,QAASA,EACTyB,SAAU,WACR4B,GAAW,EACZ,EALH,UAOE,iBAAKxG,GAAI3C,GAAgBH,UAAWC,GAAAA,WAApC,UACE,UAAC,KAAD,CACE4D,YAA4B,OAAhB2F,QAAgB,IAAhBA,GAAA,UAAAA,EAAkBhH,YAAlB,eAAwBlC,SAAU,EAC9CwD,KAnBa,WACnBuG,EAAiB,CAAErI,OAAQwH,EAAiBxH,QAC7C,EAkBOH,QA3MQ,KA2MC2H,EAAiBiB,UAC1B1G,QAAQ,0BACRC,YAAY,0BACZC,iBAAkB9D,GANpB,gBAQGqJ,QARH,IAQGA,GARH,UAQGA,EAAkBhH,YARrB,aAQG,EAAwBI,KAAI,SAACC,GAC5B,OACE,UAAC6H,GAAA,EAAD,CACE3K,MAAO,CAAE+G,QAAS,GAClB6D,KAAMjK,EAAYmC,EAAKsF,KAEvBA,IAAKtF,EAAKsF,IACVyC,oBACE,UAAC,IAAD,gBACErC,UAAU,EACVlH,SAAUA,GACNwB,GAHN,IAIE2F,YAAaA,EACbH,UAAWc,GAAgBJ,EAAUlG,EAAKtB,MAC1C6G,WAAYvF,EAAKsF,MAAQ9F,EAAAA,EAAAA,KAAAA,KACzBiG,WACEQ,GAAmBC,EAAUlG,EAAKtB,KAAKsB,GAAMvC,OAAS,EAExDyI,SAAUA,MAbTlG,EAAKsF,IAkBf,SAKV,K,4CC1PD,IAAgB,aAAe,4BAA4B,SAAW,wBAAwB,OAAS,sBAAsB,UAAY,yBAAyB,UAAY,yBAAyB,WAAa,0BAA0B,SAAW,wBAAwB,KAAO,oBAAoB,SAAW,yB,WCsOvT,IAAejI,EAAAA,EAAAA,OAAKK,EAAAA,EAAAA,IAAQ,MAVD,SAACI,GAC1B,MAAO,CACLuH,YAAa,SAACrH,GACZ,OAAOF,EAAS,CACdG,KAAM,qBACNC,QAASF,GAEZ,EAEJ,GACmBN,EA1ND,SAACV,GAClB,IAAM8F,GAAWC,EAAAA,EAAAA,MACjB,GAAgCxE,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAGhBqJ,EAUE9K,EAVF8K,KACAxC,EASEtI,EATFsI,IACA0C,EAQEhL,EARFgL,gBACAtJ,EAOE1B,EAPF0B,KACAd,EAMEZ,EANFY,WACAqK,EAKEjL,EALFiL,kBACAC,EAIElL,EAJFkL,kBAPF,EAWIlL,EAHFmL,SAAAA,OARF,MAQa,GARb,EASE5F,EAEEvF,EAFFuF,YACA8C,EACErI,EADFqI,YAGIa,EAAWtI,GAAcA,EAAWY,GAyFpC4J,EAJUD,EAASpI,KAAI,SAACC,GAC5B,OAAOA,EAAKsH,MACb,IAEuBe,SAAS/C,GAE3BW,GAAqBW,EAAAA,EAAAA,UAAQ,WACjC,IAAI0B,EAAW,GAoBf,OAnBI9I,EAAAA,EAAAA,KAAAA,OAAoB8F,GACtBgD,EAASjC,KAAKkC,EAAAA,KAEZrC,IAAavC,EAAAA,GAAAA,OAAmBjF,IAASiF,EAAAA,GAAAA,OAOlCuC,IAAavC,EAAAA,GAAAA,WAAuBjF,IAASiF,EAAAA,GAAAA,QANlDyE,EACFE,EAASjC,KAAKmC,EAAAA,IAEdF,EAASjC,KAAKoC,EAAAA,IAEe,IAA/BlG,EAAYqB,gBAAwB0E,EAASjC,KAAKqC,EAAAA,KAU7CJ,CACR,GAAE,CAAChD,EAAKY,EAAUxH,EAAM0J,EAAS7F,EAAYqB,iBAExC0C,EAAkB,CACtB,CACE9B,OAAO,UAACf,EAAA,EAAD,CAAMC,UAAWtG,GAAAA,KAAQqE,KAAK,aACrCoC,IAAK,UACL5G,SAAUgJ,IAwBd,OACE,kBAAK9I,UAAWC,GAAAA,aAAhB,WACE,iBAAKD,UAAWC,GAAAA,OAAhB,UACE,UAACwE,EAAA,EAAD,CACEC,KAAM,GACNJ,MAAU,OAAJqG,QAAI,IAAJA,OAAA,EAAAA,EAAM7F,WAAYqD,EACxBxD,IAAG,OAAEgG,QAAF,IAAEA,OAAF,EAAEA,EAAM9F,UACX2G,OAAM,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAMa,YAGlB,kBAAKxL,UAAWC,GAAAA,SAAhB,WACE,iBAAKD,UAAWC,GAAAA,UAAhB,UACE,UAACwL,GAAA,EAAD,CACEnH,MACE,kBAAKtE,UAAWC,GAAAA,SAAhB,WACE,kBAAMD,UAAWC,GAAAA,KAAjB,UAA8B,OAAJ0K,QAAI,IAAJA,OAAA,EAAAA,EAAM7F,WAAYqD,IAC3C8C,IACC,kBAAMjL,UAAWC,GAAAA,SAAjB,UAA6B,UAACqG,EAAA,EAAD,CAC3BvG,MAAO,CAAE2L,WAAY,OACrBhH,KAAK,OACLJ,KAAK,2BAKbqH,KAAI,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EAAMiB,OACZJ,OAAM,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAMa,OACdK,WAAYhB,OAGhB,iBAAK7K,UAAWC,GAAAA,UAAhB,UAEI,UAAC,GAAD,CACEoB,SAAUA,EACV+G,YAAY,EACZE,WAAYQ,EAAmBxI,OAAS,EACxC6H,IAAKA,EACL5G,KAAMA,EACNiH,YA1DQ,SAACpE,EAAD,GAAiB,IAAX+D,EAAU,EAAVA,IACxB,OAAQ/D,EAAEsC,KACR,IAAK,OACHwB,EAAY,YACZvC,EAAS,uBAAD,OAAwBwC,IAChC,MACF,IAAK,QA/HQ,SAACA,GAChB9F,EAAAA,EAAAA,KAAAA,kBACqB,CACjBhB,SAAAA,EACAC,UAAAA,EACA6I,OAAQhC,EACR2D,UAAW,IAEZxJ,MAAK,WACJyI,EAAkB,CAChBzJ,UAAAA,EACAwI,cAAa,kBACRgB,GADO,IAEVE,SAAUA,EAAS1K,OAAT,kBACF0K,GADE,CACQ,CAAEb,OAAQhC,KACxB,CACA,CACEgC,OAAQhC,OAKnB,IAAE7E,OAAM,SAAAyI,GACS,KAAbA,EAAIjL,MAA0D,2BAA3CyD,KAAKyH,MAAMD,EAAItG,MAAMwG,mBACzCxI,GAAAA,GAAAA,KAAa,CAAEsC,QAAS,8CAE3B,GACJ,CAqGKmG,CAAS/D,GACT,MACF,IAAK,UArGU,SAACA,GAClB9F,EAAAA,EAAAA,KAAAA,oBACuB,CACnBhB,SAAAA,EACAC,UAAAA,EACA6I,OAAQhC,IAET7F,MAAK,WACJ,IAAIsH,EAAK,GACT,UAAIoB,QAAJ,IAAIA,GAAAA,EAAU1K,OAAQ,CAEpB,IAAI6L,GADJvC,EAAKoB,GACQpE,WAAU,SAAC/D,GACtB,OAAOA,EAAKsH,SAAWhC,CACxB,IACDyB,EAAGM,OAAOiC,EAAK,EAChB,CACDpB,EAAkB,CAChBzJ,UAAAA,EACAwI,cAAa,kBACRgB,GADO,IAEVE,SAAUpB,KAGf,IAAEtG,OAAM,SAAAyI,GACS,KAAbA,EAAIjL,MAA0D,2BAA3CyD,KAAKyH,MAAMD,EAAItG,MAAMwG,mBACzCxI,GAAAA,GAAAA,KAAa,CAAEsC,QAAS,8CAE3B,GACJ,CA0EKqG,CAAWjE,GACX,MACF,IAAK,QA1EO,SAACA,GACf9F,EAAAA,EAAAA,KAAAA,oBAA+B,CAC7BhB,SAAAA,EACAC,UAAAA,EACA6I,OAAQhC,IACP7F,MAAK,WACN,IAAME,GAAI,OAAOsI,EAAkBtI,MAC7BoE,EAAYpE,EAAKoE,WAAU,SAAA/D,GAAI,OAAIsF,IAAQtF,EAAKsF,GAAjB,IACjCvB,GAAa,IACfpE,EAAK0H,OAAOtD,EAAU,GACtBmE,EAAkB,CAChBzJ,UAAAA,EACAwI,cAAa,kBACRgB,GADO,IAEVtI,KAAAA,MAIP,IAAEc,OAAM,SAAAyI,GACS,KAAbA,EAAIjL,MAA0D,2BAA3CyD,KAAKyH,MAAMD,EAAItG,MAAMwG,mBACzCxI,GAAAA,GAAAA,KAAa,CAAEsC,QAAS,8CAE3B,GACF,CAoDKsG,CAAQlE,GAKb,EAyCWE,UAAWc,WAOxB,KChNKhJ,GAAiB,0BAsIvB,IAAeD,EAAAA,EAAAA,OACbK,EAAAA,EAAAA,KArBsB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAK+G,EAAc,EAAdA,QAC9B,MAAO,CACL7G,YAAaF,EAAIE,YACjB4L,eAAgB/E,EAAQ+E,eACxB7L,WAAYD,EAAIC,WAChB2E,YAAa5E,EAAIgH,mBAEpB,IAE0B,SAAC7G,GAC1B,MAAO,CACLoK,kBAAmB,SAAClK,GAClB,OAAOF,EAAS,CACdG,KAAM,4BACNC,QAASF,GAEZ,EAEJ,GAGCN,EArIoB,SAACV,GAAW,IAAD,IAE7Ba,EAKEb,EALFa,YACA4L,EAIEzM,EAJFyM,eACAvB,EAGElL,EAHFkL,kBACAtK,EAEEZ,EAFFY,WACA2E,EACEvF,EADFuF,YAGF,GAAgChE,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAEZwJ,GAAoBrB,EAAAA,EAAAA,UAAQ,WAChC,OAAO6C,EAAe5C,IAAIpI,IAAc,CAAC,CAC1C,GAAE,CAACA,EAAWgL,IAETvD,EAAWtI,GAAcA,EAAWY,GAiBpCkL,EAAoB,SAAC,GAAsC,IAAD,IAAnCvK,OAAAA,OAAmC,MAA1B,GAA0B,MAAtBgJ,SAAAA,OAAsB,MAAX,KAAW,EAC9D3I,EAAAA,EAAAA,KAAAA,kBACqB,CACjBhB,SAAAA,EACAC,UAAAA,EACAc,SAzCM,GA0CNJ,OAAAA,IAEDM,MAAK,SAACC,GACL,IAAM+H,EAAU/H,EAAIkD,KAAKjD,KAAKI,KAAI,SAACC,GAAD,OAAUA,EAAKsH,MAAf,IAE9BI,EAAehI,EAAIkD,KAAKjD,KAAKI,KAAI,SAACC,GACpC,MAAO,CACLtB,KAAMsB,EAAKtB,KACX4G,IAAKtF,EAAKsH,OAEb,IAEGP,EAAK,IAETY,EAAAA,EAAAA,IAAaF,GAGXV,EADEkB,EAAkBtI,MAAmB,KAAXR,EAC1B,kBAAO8I,EAAkBtI,OAAzB,OAAkC+H,IAE/BA,EAGPQ,EAAkB,CAChBzJ,UAAAA,EACAwI,cAAa,gBACXkB,SAAUA,GACPF,GAFO,IAGVtI,KAAMoH,EACN5H,OAAQO,EAAIkD,KAAKzD,OACjByI,UAAWlI,EAAIkD,KAAKjD,KAAKlC,UAG9B,GACJ,EAUD,OARAoB,EAAAA,EAAAA,YAAU,WACS,SAAbqH,EApDJ1G,EAAAA,EAAAA,KAAAA,mBACsB,CAClBhB,SAAAA,EACAC,UAAAA,IAEDgB,MAAK,SAACC,GACLgK,EAAkB,CAAEvK,OAAQ,GAAIgJ,SAAUzI,EAAIkD,KAAKjD,MACpD,IAgDD+J,EAAkB,CAAEvK,OAAQ,IAE/B,GAAE,CAACX,EAAUC,EAAWyH,KAGvB,iBAAK/I,UAAWC,GAAAA,WAAc6C,GAAI3C,GAAlC,UACE,UAAC,KAAD,CACE8D,iBAAkB9D,GAClB0D,YAA6B,OAAjBiH,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBtI,YAAnB,eAAyBlC,SAAU,EAC/CwD,KArEe,WACnByI,EAAkB,CAAEvK,OAAM,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAmB9I,QAChD,EAoEKH,QA3FM,KA2FGiJ,EAAkBL,UAC3B1G,QAAQ,0BACRC,YAAY,0BANd,gBAQG8G,QARH,IAQGA,GARH,UAQGA,EAAmBtI,YARtB,aAQG,EAAyBI,KAAI,SAACC,GAC7B,OACE,UAAC,GAAD,CACE9C,MAAO,CAAE+G,QAAS,GAClB6D,KAAMjK,EAAYmC,EAAKsF,KAEvBA,IAAKtF,EAAKsF,IACV5G,KAAMsB,EAAKtB,KACXd,WAAYA,EACZqK,kBAAmBA,EACnBC,kBAAmBA,EACnBC,UAA2B,OAAjBF,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBE,WAAY,GACzC5F,YAAaA,GAPRvC,EAAKsF,IAUf,OAIR,KC5FKqE,GAAsB,SAAC,GAAoD,IAAD,IAAjDtL,QAAAA,OAAiD,MAAvC,WAAS,EAA8B,EAA5BuL,EAA4B,EAA5BA,SAAUrH,EAAkB,EAAlBA,YAC5D,OACE,kBAAKpF,UAAWC,EAAhB,WACE,kBAAMD,UAAWC,EAAjB,uCACA,kBAAKD,UAAWC,EAAhB,YAEG,OAACmF,QAAD,IAACA,GAAAA,EAAaqB,kBACb,kBAAMzG,UAAWC,EAAjB,UAA2B,UAACqG,EAAA,EAAD,CACzBC,UAAWtG,EACX0D,QAAS,WACP8I,EAASC,EAAAA,GAAAA,cACV,EACDpI,KAAM,cACNI,KAAK,YAGT,kBAAM1E,UAAWC,EAAjB,UACE,UAACqG,EAAA,EAAD,CAAMC,UAAWtG,EAAQ0D,QAASzC,EAASoD,KAAM,QAASI,KAAK,gBAKxE,EAmYD,IAAexE,EAAAA,EAAAA,OAAKK,EAAAA,EAAAA,KAzFI,SAAC,GAAsC,IAApCgH,EAAmC,EAAnCA,QAAS/G,EAA0B,EAA1BA,IAAKmM,EAAqB,EAArBA,OAAQrF,EAAa,EAAbA,OAC/C,MAAO,CACL5G,YAAaF,EAAIE,YACjBkM,QAASpM,EAAIoM,QACbC,gBAAiBF,EAAOE,gBACxBrF,mBAAoBhH,EAAIgH,mBACxBlC,qBAAsBiC,EAAQjC,qBAC9BD,iBAAkBiC,EAAOjC,iBACzByH,kBAAmBH,EAAOG,kBAE7B,IAE0B,SAACnM,GAC1B,MAAO,CACL2I,WAAY,SAACzI,GACX,OAAOF,EAAS,CACdG,KAAM,qBACNC,QAASF,GAEZ,EACDkM,gBAAiB,SAAClM,GAChB,OAAOF,EAAS,CACdG,KAAM,sBACNC,QAASF,GAEZ,EACDD,kBAAmB,SAACC,GAClB,OAAOF,EAAS,CACdG,KAAM,8BACNC,QAASF,GAEZ,EACDmM,oBAAqB,SAACnM,GACpB,OAAOF,EAAS,CACdG,KAAM,6BACNC,QAASF,GAEZ,EACDG,cAAe,SAACH,GACd,OAAOF,EAAS,CACdG,KAAM,uBACNC,QAASF,GAEZ,EACDoM,eAAgB,SAACpM,GACf,OAAOF,EAAS,CACdG,KAAM,qBACNC,QAASF,GAEZ,EACDqM,oBAAqB,SAACrM,GACpB,OAAOF,EAAS,CACdG,KAAM,6BACNC,QAASF,GAEZ,EACDsM,wBAAyB,SAACtM,GACxB,OAAOF,EAAS,CACdG,KAAM,kCACNC,QAASF,GAEZ,EACDuM,sBAAuB,SAACvM,GACtB,OAAOF,EAAS,CACdG,KAAM,4BACNC,QAASF,GAEZ,EACDwM,iBAAkB,SAACxM,GACjB,OAAOF,EAAS,CACdG,KAAM,2BACNC,QAASF,GAEZ,EACDyM,kBAAmB,SAACzM,GAClB,OAAOF,EAAS,CACdG,KAAM,wBACNC,QAASF,GAEZ,EACD0M,aAAc,SAAC1M,GACb,OAAOF,EAAS,CACdG,KAAM,uBACNC,QAASF,GAEZ,EAEJ,GAEmBN,EArXJ,SAACV,GAAW,IAAD,IAEvByJ,EAkBEzJ,EAlBFyJ,WACAsD,EAiBE/M,EAjBF+M,QACAC,EAgBEhN,EAhBFgN,gBACAE,EAeElN,EAfFkN,gBACAnM,EAcEf,EAdFe,kBACAoM,EAaEnN,EAbFmN,oBACA1H,EAYEzF,EAZFyF,qBACA6H,EAWEtN,EAXFsN,wBACA3F,EAUE3H,EAVF2H,mBACAxG,EASEnB,EATFmB,cACAiM,EAQEpN,EARFoN,eACAC,EAOErN,EAPFqN,oBACAE,EAMEvN,EANFuN,sBACAC,EAKExN,EALFwN,iBACAC,EAIEzN,EAJFyN,kBACAjI,EAGExF,EAHFwF,iBACAyH,EAEEjN,EAFFiN,kBACAS,EACE1N,EADF0N,aAGF,GAAgCnM,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAEZkM,GAAMC,EAAAA,EAAAA,UAENC,GAAcjE,EAAAA,EAAAA,UAAQ,WAC1B,OAAOmD,EAAQe,EAAAA,GAAAA,WAAqBjE,IAAIpI,IAAc,CAAC,CACxD,GAAE,CAACA,EAAWsL,IAETgB,GAAmBC,EAAAA,EAAAA,aAAW,yCAClC,uGAASvM,EAAT,EAASA,UAAT,IAAoBU,OAAAA,OAApB,MAA6B,GAA7B,oBAEoBK,EAAAA,EAAAA,KAAAA,eAA0B,CACxCF,SAAUb,EACVc,SAAU0L,EAAAA,GACV9L,OAAAA,IALN,OAEQO,EAFR,OAOIgL,EAAa,CACXjM,UAAAA,EACAyM,WAAY,CACVvL,KAAMD,EAAIE,SACVT,OAAQO,EAAIG,WAAWV,OACvByI,UAAWlI,EAAIE,SAASnC,UAZhC,gDAgBI0N,QAAQC,IAAR,MAhBJ,yDADkC,sDAoBlC,CAACV,IAGGW,GAAcL,EAAAA,EAAAA,cAAY,WAC1BxM,GAAYC,GACde,EAAAA,EAAAA,KAAAA,YAAuB,CAAEhB,SAAAA,EAAUC,UAAAA,IAAagB,MAAK,SAACC,GAC/CA,EAAIkD,KAAK0I,QACZ9L,EAAAA,EAAAA,KAAAA,YACe,CACXhB,SAAAA,EACAC,UAAAA,IAEDgB,MAAK,SAACC,GACLqL,EAAiB,CAAEtM,UAAAA,IACnB,IAAIoC,GAAM0K,EAAAA,EAAAA,IAAU,CAClBC,SAAUV,EAAAA,GAAAA,UACV7M,KAAM,SACNwN,GAAIhN,EACJiN,YAAaC,EAAAA,GAAAA,oBACbC,WAAY,CACVC,YAAaC,EAAWrK,KACxBsK,aAAcrM,EAAIkD,KAAKnB,SAG3BuK,EAAAA,EAAAA,IAAWnL,GAAKpB,MAAK,WACnBgL,EAAkB,CAChBe,SAAU3K,EAAI2K,SACdS,OAAQpL,EAAI4K,GACZZ,YAAa,CACXlL,KAAM,EAAC,kBAAKkB,GAAN,IAAWkB,KAAMvC,EAAAA,EAAAA,KAAAA,UAG5B,GACF,GAEN,GAEJ,GAAE,CAAChB,EAAUC,IAERyN,EAAgB,SAAC,GAAqB,IAAD,IAAlB/M,OAAAA,OAAkB,MAAT,GAAS,EACzCK,EAAAA,EAAAA,KAAAA,mBACsB,CAClB2M,SAAU1N,EACVc,SAnIU,GAoIViM,SAAU,YACVrM,OAAAA,IAEDM,MAAK,SAACC,GACLA,EAAI0M,SAASjM,SAAQ,SAACH,GACpBoK,EAAe,CACbiC,MAAOrM,EAAKC,GACZqM,UAAWtM,EAAKsM,WAEnB,IACDpC,EAAgB,CACdsB,SAAU,YACVS,OAAQxN,EACRoM,YAAa,CACXlL,KAAMD,EAAI0M,SACVjN,OAAQO,EAAIP,OACZyI,UAAWlI,EAAI0M,SAAS3O,QAE1B8O,OAAOpN,GAEV,GACJ,GAGDN,EAAAA,EAAAA,YAAU,WAERd,GAAkB,GAElBI,EAAc,CAAC,GACf+N,EAAc,CAAE/M,OAAQ,IACzB,GAAE,CAACV,IAGJ,IAAM+N,EAAkB,SAACC,GAA0C,IAAtCC,EAAqC,wDAAf9J,EAAe,uCAATb,EAAS,uCAChE,OAAQ0K,GACN,IAAK,eACHnC,GAAwB,GACxBH,GAAoB,GACpBhM,EAAc,CACZwO,cAAe/J,IAEjB7E,GAAkB,GAClBsM,GAAoB,GACpB,MACF,IAAK,kBACH,IAAM9J,EACK,eAATwB,EAAwBa,EAAK3C,GAAK2C,EAAKgK,mBAAmB3M,GAC5D,GAAIM,IAAiB0J,EAAkBhK,GACrC,OAEFT,EAAAA,EAAAA,KAAAA,eACkB,CAAEe,aAAAA,IACjBd,MAAK,SAACC,GACL4K,GAAwB,GACxBuC,EAAmBjK,EAAMb,EAC1B,IACAtB,OAAM,SAACc,GACS,OAAXA,EAAEtD,MACJqM,GAAwB,GAExBuC,EAAmBjK,EAAMb,IACL,OAAXR,EAAEtD,MACX2C,GAAAA,GAAAA,KAAa,CAAEsC,QAAS,oDAE3B,IACH,MACF,IAAK,aACH/E,EAAc,CAAC,GACfJ,GAAkB,GAClBuM,GAAyB7H,GACzB,MACF,IAAK,UACH8H,EAAsB,QACtB,MACF,IAAK,UACHuC,EAAAA,EAAAA,IAAclK,EAAM8J,GAKzB,EAEKG,EAAqB,SAACjK,EAAMb,GAChCoI,GAAoB,GAEpB,IAAM5J,EACK,eAATwB,EAAwBa,EAAK3C,GAAK2C,EAAKgK,mBAAmB3M,GAC5DT,EAAAA,EAAAA,KAAAA,oBAA+B,CAAEe,aAAAA,IAAgBd,MAAK,SAACC,GAErD,IAAIqN,EACO,eAAThL,GACIiL,EAAAA,EAAAA,IAAmBpK,EAAKtD,SAAUsD,EAAKqK,WACvCrK,EACF+J,EAAgBI,GAAO,kBAAQA,GAAR,IAAiBH,mBAAoB,CAAC,IAAM,CAAC,EACxEzO,GAAc,kBAAKuB,EAAIkD,MAAV,IAAgB+J,cAAAA,KAE7B5O,GAAkB,EACnB,GACF,GAMDc,EAAAA,EAAAA,YAAU,WACR,OAAO,WACL4H,GAAW,EACZ,CACF,GAAE,CAACjI,KAEJK,EAAAA,EAAAA,YAAU,WACRwM,IACA5E,GAAW,EACZ,GAAE,CAAChI,IAEJ,IAAMqN,GAAalF,EAAAA,EAAAA,UAAQ,WACzB,OA9NsB,SAAC,GAAwC,IAAD,IAArCpI,SAAAA,OAAqC,MAA1B,GAA0B,MAAtB0O,WACtCnG,QAD4D,MAAT,GAAS,GAC5CC,QAAO,SAAChH,GAC1B,OAAOA,EAAKC,KAAOzB,CACpB,IAED,OAAIuI,EAAGtJ,OACEsJ,EAAG,GAEH,CAAC,CAEX,CAoNUoG,CAAkB,CAAE3O,SAAAA,EAAU0O,WAAY1K,EAAiB7C,MACnE,GAAE,CAACnB,EAAUgE,IACd,OACE,kBAAKmI,IAAKA,EAAKxN,UAAWC,EAA1B,WACE,kBAAKD,UAAWC,EAAhB,WACE,UAACgQ,GAAD,CACE5O,SAAUA,EACVC,UAAWA,EACXL,kBAAmBoO,KAErB,kBAAKrP,UAAWC,EAAhB,WACE,iBAAK6C,GAAI3C,EAAAA,GAAgBH,UAAWC,EAApC,UACE,UAAC,KAAD,CACEiQ,SAAS,EACTrM,YAAuB,OAAX6J,QAAW,IAAXA,GAAA,UAAAA,EAAalL,YAAb,eAAmBlC,SAAU,EACzCwD,KA/BS,WACnBiL,EAAc,CAAE/M,OAAM,OAAE0L,QAAF,IAAEA,OAAF,EAAEA,EAAa1L,QACtC,EA8BWH,SAAoB,OAAX6L,QAAW,IAAXA,OAAA,EAAAA,EAAajD,YAxQlB,GAyQJ1K,MAAO,CACLoQ,QAAS,OACTC,cAAe,iBACfC,UAAW,SAEbtM,QAAQ,UAAC,KAAD,IACRC,YACE,iBAAKjE,MAAO,CAAEuQ,UAAW,UAAzB,8DAEFrM,iBAAkB9D,EAAAA,GAdpB,gBAgBGuN,QAhBH,IAgBGA,GAhBH,UAgBGA,EAAalL,YAhBhB,aAgBG,EAAmBI,KAAI,SAACC,GACvB,OACE,2BACE,UAAC0N,GAAA,EAAD,CACEpO,SAAUb,EACVmC,QAASZ,EACT5B,kBAAmBoO,EACnBmB,OAAQC,EAAAA,GAAAA,aALF5N,EAAKC,GASlB,SAIL,iBAAK9C,UAAWC,EAAhB,UACE,UAACyQ,GAAA,EAAD,CAAOrC,SAAUV,EAAAA,GAAAA,UAAqBmB,OAAQxN,aAIpD,UAAC,GAAD,IAECuL,IACC,iBAAK7M,UAAWC,EAAhB,UACE,UAAC0Q,GAAA,QAAD,MAIHrL,IACC,kBAAKtF,UAAWC,EAAhB,WACE,UAACuM,GAAD,CACEpH,YAAaoC,EACbiF,SAAUY,EACVnM,QAAS,WACPiM,GAAwB,EACzB,KAEH,iBAAKnN,UAAWC,EAAhB,UACE,UAAC,GAAD,WAMX,I","sources":["webpack://circle/./src/components/HeaderWrap/index.module.less?371d","components/HeaderWrap/index.js","webpack://circle/./src/views/Channel/index.module.less?50ba","webpack://circle/./src/views/Channel/components/Header/index.module.less?9a07","webpack://circle/./src/views/Thread/components/ThreadList/index.module.less?e676","views/Thread/components/ThreadList/index.js","views/Channel/components/Header/index.js","webpack://circle/./src/views/Channel/components/MemberModal/index.module.less?2a90","webpack://circle/./src/components/CustomModal/index.module.less?4e2d","components/CustomModal/index.js","webpack://circle/./src/views/Channel/components/MemberOpt/index.module.less?cbbe","views/Channel/components/MemberOpt/index.js","views/Channel/components/MemberModal/index.js","webpack://circle/./src/views/Channel/components/ChannelMember/index.module.less?4bd5","views/Channel/components/ChannelMember/memberItem.js","views/Channel/components/ChannelMember/index.js","views/Channel/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"headerWrap\":\"index_headerWrap__7KmC+\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\n\nconst HeaderWrap = (props) => {\n  const { children, style = {} } = props;\n  return (\n    <div className={s.headerWrap} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default memo(HeaderWrap);\n","// extracted by mini-css-extract-plugin\nexport default {\"channelWrap\":\"index_channelWrap__2Cl0G\",\"contentWrap\":\"index_contentWrap__-dE+q\",\"messageWrap\":\"index_messageWrap__X7yBX\",\"iptWrap\":\"index_iptWrap__1Oivy\",\"main\":\"index_main__vuf9Z\",\"side\":\"index_side__2dEpe\",\"drawerWrap\":\"index_drawerWrap__vPCX7\",\"drawerBody\":\"index_drawerBody__SoY4n\",\"icon\":\"index_icon__VK19H\",\"drawerHeader\":\"index_drawerHeader__6Q1tE\",\"channelMember\":\"index_channelMember__Ik9ff\",\"iconCon\":\"index_iconCon__90kXp\",\"invite\":\"index_invite__b2bry\",\"close\":\"index_close__GD7QC\"};","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"index_name__Dg-KW\",\"base\":\"index_base__261L6\",\"private\":\"index_private__lIo5s\",\"optWrap\":\"index_optWrap__euZay\",\"icon\":\"index_icon__n77Kx\",\"popover\":\"index_popover__Q5UbL\",\"iconCon\":\"index_iconCon__1dXWd\"};","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"index_layout__xZ0mN\",\"headerThread\":\"index_headerThread__yiUwL\",\"headerTitle\":\"index_headerTitle__vlJ89\",\"HeaderIcon\":\"index_HeaderIcon__W7gCL\",\"list\":\"index_list__HzFPb\",\"defaultTips\":\"index_defaultTips__BSNZV\",\"tips1\":\"index_tips1__nyPx8\",\"tips2\":\"index_tips2__ynQLg\",\"item\":\"index_item__kIqm6\",\"itemCon\":\"index_itemCon__KAERQ\",\"itemName\":\"index_itemName__DvFdE\",\"itemBottom\":\"index_itemBottom__KLB-C\",\"noMessage\":\"index_noMessage__RO9tL\",\"leftCon\":\"index_leftCon__E7YW7\",\"avatar\":\"index_avatar__pLH7v\",\"ownerName\":\"index_ownerName__XOymd\",\"message\":\"index_message__Q7e4O\",\"itemOwner\":\"index_itemOwner__PVvVq\",\"itemMsg\":\"index_itemMsg__2HJcD\",\"itemTime\":\"index_itemTime__4XDAS\"};","import React, { memo, useState, useEffect } from \"react\";\nimport s from \"./index.module.less\";\nimport Icon from \"@/components/Icon\";\nimport { connect } from \"react-redux\";\nimport { getTimeDiff, renderTxt } from \"@/utils/common\";\nimport { useParams } from \"react-router-dom\";\nimport WebIM from \"@/utils/WebIM\";\nimport AvatarInfo from \"@/components/AvatarInfo\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport CloseIcon from \"@/components/CloseIcon\";\n\nconst SCROLL_WARP_ID = \"threadListScrollId\";\nconst LIMIT = 20;\nconst ThreadList = (props) => {\n    const { serverRole, appUserInfo, onHandleOperation, onClose, visibleThread } = props;\n    const { serverId, channelId } = useParams();\n    const role = serverRole[serverId];\n    const [threadList, setThreadList] = useState([])\n    //滚动加载\n    useEffect(() => {\n        if (visibleThread) {\n            getThreadsList(role);\n        } else {\n            setThreadListCursor(\"\")\n        }\n    }, [role, visibleThread])\n    const [hasMore, setHasMore] = useState(true);\n    const [threadListCursor, setThreadListCursor] = useState(null);\n    const loadMoreData = () => {\n        getThreadsList(role, threadListCursor)\n    }\n    const getThreadsList = (role, cursor = \"\") => {\n        const fetchFn = role !== \"user\" ? \"getChatThreads\" : \"getJoinedChatThreads\";\n        let paramsData = {\n            parentId: channelId,\n            pageSize: LIMIT,\n            cursor,\n        }\n        WebIM.conn[fetchFn](paramsData).then((res) => {\n            const list = res.entities;\n            if (list.length === 0) {\n                if (!paramsData.isScroll) {\n                    setThreadList(list)\n                }\n                return\n            }\n            if (LIMIT === list.length) {\n                setHasMore(true);\n            } else {\n                setHasMore(false)\n            }\n            setThreadListCursor(res.properties.cursor);\n            const chatThreadIds = list.map((item) => item.id);\n            WebIM.conn.getChatThreadLastMessage({ chatThreadIds }).then((res) => {\n                const msgList = res.entities;\n                list.forEach((item) => {\n                    let found = msgList.find(msgInfo => item.id === msgInfo.chatThreadId);\n                    item.lastMessage = found && found.lastMessage ? found.lastMessage : {}\n                })\n                threadListCursor === \"\" ? setThreadList(list) : setThreadList([...threadList, ...list]);\n            }).catch(() => {\n                threadListCursor === \"\" ? setThreadList(list) : setThreadList([...threadList, ...list]);\n            })\n        })\n    }\n    const openThreadPanel = (option) => {\n        onHandleOperation(\"openThreadPanel\", true, option, \"threadList\");\n        onClose();\n    }\n\n    const renderMessage = (message) => {\n        switch (message.type) {\n            case 'txt':\n                return message.msg\n            case 'file':\n                return `文件`\n            case 'img':\n                return `图片`\n            default:\n                return ''\n        }\n    }\n    return (\n        <div className={s.layout}>\n            <div className={s.headerThread}>\n                <span className={s.headerTitle}>子区列表</span>\n                <div className={s.HeaderIcon} onClick={() => onClose()}>\n                    <CloseIcon />\n                </div>\n            </div>\n            <ul id={SCROLL_WARP_ID} className={s.list}>\n                {renderDefaultList(threadList)}\n                <InfiniteScroll\n                    dataLength={threadList.length || 0}\n                    next={loadMoreData}\n                    hasMore={hasMore}\n                    loader={<></>}\n                    endMessage={<></>}\n                    scrollableTarget={SCROLL_WARP_ID}\n                >\n                    {threadList.length > 0 && threadList.map((option, index) => {\n                        return (\n                            <li className={s.item} key={index} onClick={(e) => openThreadPanel(option)}>\n                                <div className={s.itemCon}>\n                                    <div className={s.itemName}>{option.name}</div>\n                                    {option.lastMessage && JSON.stringify(option.lastMessage) !== \"{}\" ?\n                                        <div className={s.itemBottom}>\n                                            <div className={s.leftCon}>\n                                                <div className={s.avatar}><AvatarInfo size={16} src={appUserInfo[option.lastMessage?.from]?.avatarurl} /></div>\n                                                <div className={s.ownerName}>\n                                                    <span className={s.itemOwner}>{appUserInfo[option.lastMessage?.from]?.nickname ||\n                                                        option.lastMessage.from}</span>\n                                                </div>\n                                                {option.lastMessage && <div className={s.message}><span className={s.itemMsg}>{renderTxt(renderMessage(option.lastMessage))}</span></div>}</div>\n                                            <span className={s.itemTime}>{getTimeDiff(option.lastMessage?.time)}</span>\n                                        </div> : <div className={s.itemBottom}>\n                                            <span className={s.noMessage}>最新消息被撤回</span></div>}\n\n                                </div>\n                            </li>\n                        );\n                    })}\n                </InfiniteScroll>\n            </ul>\n        </div>\n    );\n};\n//The list is empty\nconst renderDefaultList = (threadList) => {\n    if (threadList.length === 0) return (\n        <div className={s.defaultTips}>\n            <div className={s.tips1}><span className='tlp-tips1-img'></span>当前没有子区</div>\n            {/* <div className={s.tips2}>请在频道消息下创建子区</div> */}\n        </div>\n    )\n}\nconst mapStateToProps = ({ app }) => {\n    return {\n        serverRole: app.serverRole,\n        appUserInfo: app.appUserInfo\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleThreadPanel: (params) => {\n            return dispatch({\n                type: \"thread/setThreadPanelStatus\",\n                payload: params\n            })\n        },\n        setThreadInfo: (params) => {\n            return dispatch({\n                type: \"thread/setThreadInfo\"\n            })\n        }\n    };\n};\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ThreadList));\n","import React, { memo, useState, useEffect } from \"react\";\nimport s from \"./index.module.less\";\nimport HeaderWrap from \"@/components/HeaderWrap\";\nimport Icon from \"@/components/Icon\";\nimport { Popover, Menu, Tooltip } from \"antd\";\nimport { USER_ROLE } from \"@/consts\";\nimport ThreadList from \"@/views/Thread/components/ThreadList\";\nimport WebIM from \"@/utils/WebIM\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { deleteLocalChannel } from \"@/utils/common\"\n\nconst ChannelHeader = (props) => {\n  const {\n    onHandleOperation,\n    channelId,\n    serverId,\n    setChannelInfo,\n    channelInfo,\n    serverRole,\n    joinedServerInfo,\n    channelMemberVisible\n  } = props;\n  //操作thread列表\n  const [visibleThread, setVisibleThread] = useState(false);\n  const userRole = serverRole[serverId];\n  const getChannelInfo = ({ serverId, channelId }) => {\n    WebIM.conn.getChannelDetail({ serverId, channelId }).then((res) => {\n      setChannelInfo(res.data);\n    });\n  };\n\n  const hideThreadList = () => {\n    setVisibleThread(false);\n  };\n  const handleVisibleThreadListChange = (newVisible) => {\n    setVisibleThread(newVisible);\n  };\n\n  useEffect(() => {\n    getChannelInfo({\n      serverId,\n      channelId\n    });\n  }, [channelId, serverId]);\n\n  let navigate = useNavigate();\n  const onMenuClick = (e) => {\n    if (e.key === \"deleteChannel\") {\n      WebIM.conn.destroyChannel({ serverId, channelId }).then(() => {\n        deleteLocalChannel(serverId, channelId, true);\n        const list = joinedServerInfo.list || [];\n        const findIndex = list.findIndex(item => item.id === serverId);\n        if (findIndex > -1) {\n          const defaultChannelId = list[findIndex].defaultChannelId;\n          navigate(`/main/channel/${serverId}/${defaultChannelId}`);\n        }\n      })\n    }\n  }\n  return (\n    <HeaderWrap>\n      <span className={`${s.name} ${channelInfo?.isPublic\n          ? `${s.channelNameWrap} ${s.base} `\n          : `${s.channelNameWrap} ${s.private}`}`} \n        >{channelInfo?.name}</span>\n      <div className={s.optWrap}>\n        <Popover\n          placement=\"bottomRight\"\n          content={\n            <ThreadList\n              onClose={hideThreadList}\n              onHandleOperation={onHandleOperation}\n              visibleThread={visibleThread}\n            />\n          }\n          trigger=\"click\"\n          visible={visibleThread}\n          onVisibleChange={handleVisibleThreadListChange}\n          overlayClassName={s.popover}\n        >\n          <Tooltip title=\"子区列表\" overlayClassName=\"toolTip\">\n            <span>\n              <Icon iconClass={s.icon} size=\"24px\" name=\"message_on_message\" />\n            </span>\n          </Tooltip>\n        </Popover>\n        <Tooltip title={channelMemberVisible ? \"隐藏成员名单\" : \"显示成员名单\"} overlayClassName=\"toolTip\">\n          <div\n            onClick={() => {\n              onHandleOperation(\"showMember\");\n            }}\n          >\n            <Icon iconClass={s.icon} size=\"24px\" name=\"person_2\" />\n          </div>\n        </Tooltip>\n        {userRole && userRole !== USER_ROLE.user && (\n          <Tooltip title=\"频道设置\" overlayClassName=\"toolTip\">\n            <div\n              onClick={() => {\n                onHandleOperation(\"setting\");\n              }}\n            >\n              <Icon iconClass={s.icon} size=\"24px\" name=\"gear\" />\n            </div>\n          </Tooltip>\n        )}\n        {channelInfo.defaultChannel === 0 && userRole && userRole === USER_ROLE.owner && (\n          <Menu\n            onClick={onMenuClick}\n            style={{ padding: 0 }}\n            theme={\"dark\"}\n            selectable={false}\n            triggerSubMenuAction=\"click\"\n            mode=\"horizontal\"\n            items={getChannelItems()}\n          ></Menu>\n        )}\n\n      </div>\n    </HeaderWrap >\n  );\n};\nconst getChannelItems = () => {\n  return [\n    {\n      label: (\n        <div className={s.iconCon}>\n          <Icon iconClass={s.icon} name=\"ellipsis\" size=\"24px\" />\n        </div>\n      ),\n      key: \"SubMenu\",\n      children: [\n        {\n          label: (\n            <div className={s.menuWrap}>\n              <Icon name=\"trash\" size=\"22px\" />\n              <span>删除频道</span>\n            </div>\n          ),\n          key: \"deleteChannel\"\n        },\n      ]\n    }\n  ];\n};\nconst mapStateToProps = ({ app, server, channel }) => {\n  return {\n    channelInfo: app.currentChannelInfo,\n    serverRole: app.serverRole,\n    joinedServerInfo: server.joinedServerInfo,\n    channelMemberVisible: channel.channelMemberVisible,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setChannelInfo: (params) => {\n      return dispatch({\n        type: \"app/setCurrentChannelInfo\",\n        payload: params\n      });\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(ChannelHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"index_name__hXwKm\",\"person\":\"index_person__kNyXs\",\"base\":\"index_base__n-ZGI\",\"scrollWrap\":\"index_scrollWrap__2mPer\",\"iptWrap\":\"index_iptWrap__9eMt2\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalWrap\":\"index_modalWrap__eUYS6\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\nimport { Modal } from \"antd\";\nimport CloseIcon from \"@/components/CloseIcon\"\n\nconst CustomModal = (props) => {\n  const { visible, onCancel, children, title } = props;\n  return (\n    <div className={s.modalWrap}>\n      <Modal\n        width=\"100%\"\n        style={{ top: 0 }}\n        getContainer={false}\n        title={title}\n        visible={visible}\n        mask={false}\n        footer={false}\n        destroyOnClose={true}\n        onCancel={() => {\n          onCancel();\n        }}\n        closeIcon={<CloseIcon />}\n      >\n        {children}\n      </Modal>\n    </div>\n  );\n};\n\nexport default memo(CustomModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"role\":\"index_role__Qz-D+\",\"creator\":\"index_creator__YZX+t\",\"admin\":\"index_admin__6TdNg\",\"optWrap\":\"index_optWrap__nX24z\",\"iconWrap\":\"index_iconWrap__+3sYB\",\"icon\":\"index_icon__k-qfk\"};","import React, { memo } from \"react\";\nimport s from \"./index.module.less\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport Icon from \"@/components/Icon\";\nimport { USER_ROLE } from \"@/consts\";\nimport { connect } from \"react-redux\";\n\nconst MemberOpt = ({\n  role,\n  uid,\n  serverId,\n  isShowChat = true,\n  menuItems = [],\n  showOpIcon,\n  setSelected,\n  isServer,\n  onMenuClick = () => { }\n}) => {\n  const navigate = useNavigate();\n  const isCreator = role === USER_ROLE.owner;\n  return (\n    <div className={s.optWrap}>\n      {role !== USER_ROLE.user && (\n        <div className={`${s.role} ${isCreator ? s.creator : s.admin} `}\n          style={{ marginRight: isServer ? \"12px\" : \"8px\" }}>\n          {role === USER_ROLE.owner ? \"创建者\" : \"管理员\"}\n        </div>\n      )}\n      {isShowChat && (\n        <div\n          className={`${isServer ? 'opBg' : s.iconWrap}`}\n          style={{ marginRight: isServer ? \"12px\" : \"8px\" }}\n          onClick={() => {\n            setSelected(\"contacts\");\n            navigate(`/main/contacts/chat/${uid}`);\n          }}\n        >\n          <Icon iconClass='opIcon' name=\"message_retangle\" />\n        </div>\n      )}\n\n      {showOpIcon && (\n        <div  className={`${isServer ? 'opBg' : s.iconWrap}`}>\n          <Menu\n            onClick={(e) => {\n              onMenuClick(e, { uid, serverId });\n            }}\n            style={{ padding: 0 }}\n            theme={\"dark\"}\n            selectable={false}\n            triggerSubMenuAction=\"click\"\n            mode=\"horizontal\"\n            items={menuItems}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelected: (params) => {\n      return dispatch({\n        type: \"app/setSelectedTab\",\n        payload: params\n      });\n    }\n  };\n};\nexport default memo(connect(null, mapDispatchToProps)(MemberOpt));\n","import React, { memo, useEffect, useMemo } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport s from \"./index.module.less\";\nimport { connect } from \"react-redux\";\nimport CustomModal from \"@/components/CustomModal\";\nimport HeaderWrap from \"@/components/HeaderWrap\";\nimport MemberItem from \"@/components/MemberItem\";\nimport WebIM from \"@/utils/WebIM\";\nimport { useParams } from \"react-router-dom\";\nimport { getUsersInfo } from \"@/utils/common\";\nimport { message } from \"antd\";\nimport Icon from \"@/components/Icon\";\nimport MemberOpt from \"../MemberOpt\";\nimport { USER_ROLE } from \"@/consts\";\n\nconst PAGE_SIZE = 20;\n\nconst SCROLL_WARP_ID = \"memberScrollWrap\";\n\nconst Title = () => {\n  return (\n    <HeaderWrap style={{ position: \"unset\", width: \"100%\" }}>\n      <span className={`${s.name} ${s.public}`}><span className={s.person}><Icon name=\"person_2\" color=\"#fff\" size=\"26px\"/></span>社区成员</span>\n      {/* <div className={`${s.iptWrap}`}>\n        <Icon name=\"magnify\" color=\"#fff\" />\n        <Input placeholder=\"搜索社区成员\" autoComplete=\"off\" />\n      </div> */}\n    </HeaderWrap>\n  );\n};\n\nconst MemberMenuChildren = (selfRole, userRole, item) => {\n  let menu = [];\n  if (userRole === USER_ROLE.owner || selfRole === USER_ROLE.user) return menu;\n  if (selfRole === USER_ROLE.owner) {\n    let menu1 = {};\n    if (userRole === USER_ROLE.user) {\n      menu1 = {\n        label: (\n          <div>\n            <Icon name=\"person_nut\" size=\"24px\" />\n            <span>设为管理员</span>\n          </div>\n        ),\n        key: \"setAdmin\"\n      };\n    } else if (userRole === USER_ROLE.moderator) {\n      menu1 = {\n        label: (\n          <div>\n            <Icon name=\"person_normal\" size=\"22px\" />\n            <span>取消管理员</span>\n          </div>\n        ),\n        key: \"removeAdmin\"\n      };\n    }\n    menu.push(menu1);\n  }\n  if(item?.uid !== WebIM.conn.user){\n    menu.push({\n      label: (\n        <div>\n          <Icon name=\"minus_in_circle\" size=\"16px\" />\n          <span>踢出社区</span>\n        </div>\n      ),\n      key: \"kick\"\n    });\n  }\n  return menu;\n};\n\nconst MemberMenuItems = (selfRole, userRole) => [\n  {\n    label: <Icon iconClass='opIcon' name=\"ellipsis\" />,\n    key: \"SubMenu\",\n    children: MemberMenuChildren(selfRole, userRole)\n  }\n];\n\nconst MemberModal = (props) => {\n  const {\n    visible,\n    setVisible,\n    appUserInfo,\n    setServerUserMap,\n    serverUserMap,\n    serverRole\n  } = props;\n\n  const { serverId, channelId } = useParams();\n  const selfRole = serverRole && serverRole[serverId];\n  const serverMemberInfo = useMemo(() => {\n    return serverUserMap.get(serverId) || {};\n  }, [serverId, serverUserMap]);\n\n  // 踢出列表\n  const onKick = (uid) => {\n    let ls = serverMemberInfo?.list?.filter((item) => {\n      return item.uid !== uid;\n    });\n    setServerUserMap({\n      serverId,\n      userListInfo: {\n        ...serverUserMap.get(serverId),\n        list: ls\n      }\n    });\n  };\n  //设置角色后更新社区成员角色\n  const updateUserRole = (serverId, uid, role) => {\n    const userList = [...serverMemberInfo?.list] || [];\n    let fIndex = userList.findIndex((item) => {\n      return item.uid === uid;\n    });\n    if (fIndex > -1) {\n      let find = { ...userList[fIndex] };\n      find.role = role;\n      userList.splice(fIndex, 1, find);\n      setServerUserMap({\n        serverId,\n        userListInfo: {\n          ...serverUserMap.get(serverId),\n          list: userList\n        }\n      });\n    }\n  };\n\n  const onMenuClick = (e, { uid, serverId }) => {\n    if (e.key === \"kick\") {\n      WebIM.conn\n        .removeServerMember({\n          serverId,\n          userId: uid\n        })\n        .then(() => {\n          onKick(uid);\n          message.success(\"踢出成功\");\n        });\n    } else if (e.key === \"setAdmin\") {\n      let options = {\n        serverId: serverId,\n        userId: uid\n      };\n      WebIM.conn.setServerAdmin(options).then(() => {\n        updateUserRole(serverId, uid, USER_ROLE.moderator);\n      });\n    } else if (e.key === \"removeAdmin\") {\n      let options = {\n        serverId: serverId,\n        userId: uid\n      };\n      WebIM.conn.removeServerAdmin(options).then(() => {\n        updateUserRole(serverId, uid, \"user\");\n      });\n    }\n  };\n\n  const getServerMembers = ({ cursor = \"\" }) => {\n    WebIM.conn\n      .getServerMembers({\n        serverId: serverId,\n        pageSize: PAGE_SIZE,\n        cursor\n      })\n      .then((res) => {\n        const uidList = res.data.list.map((item) => item.userId);\n\n        let userRoleList = res.data.list.map((item) => {\n          return {\n            role: item.role,\n            uid: item.userId\n          };\n        });\n\n        let ls = [];\n\n        getUsersInfo(uidList);\n\n        if (cursor !== \"\") {\n          ls = [...serverMemberInfo.list, ...userRoleList];\n        } else {\n          ls = userRoleList;\n        }\n\n        setServerUserMap({\n          serverId,\n          userListInfo: {\n            list: ls,\n            cursor: res.data.cursor,\n            loadCount: res.data.list.length\n          }\n        });\n      });\n  };\n\n  const loadMoreData = () => {\n    getServerMembers({ cursor: serverMemberInfo.cursor });\n  };\n\n  useEffect(() => {\n    visible && getServerMembers({ cursor: \"\" });\n  }, [visible]);\n\n  return (\n    <CustomModal\n      title={<Title />}\n      visible={visible}\n      onCancel={() => {\n        setVisible(false);\n      }}\n    >\n      <div id={SCROLL_WARP_ID} className={s.scrollWrap}>\n        <InfiniteScroll\n          dataLength={serverMemberInfo?.list?.length || 0}\n          next={loadMoreData}\n          hasMore={serverMemberInfo.loadCount === PAGE_SIZE}\n          loader={<></>}\n          endMessage={<></>}\n          scrollableTarget={SCROLL_WARP_ID}\n        >\n          {serverMemberInfo?.list?.map((item) => {\n            return (\n              <MemberItem\n                style={{ padding: 0 }}\n                info={appUserInfo[item.uid]}\n                key={item.uid}\n                uid={item.uid}\n                operationReactNode={\n                  <MemberOpt\n                    isServer={true}\n                    serverId={serverId}\n                    {...item}\n                    onMenuClick={onMenuClick}\n                    menuItems={MemberMenuItems(selfRole, item.role)}\n                    isShowChat={item.uid !== WebIM.conn.user}\n                    showOpIcon={\n                      MemberMenuChildren(selfRole, item.role,item).length > 0\n                    }\n                    selfRole={selfRole}\n                  />\n                }\n              />\n            );\n          })}\n        </InfiniteScroll>\n      </div>\n    </CustomModal>\n  );\n};\n\nconst mapStateToProps = ({ channel, app, server }) => {\n  return {\n    visible: channel.memberVisible,\n    appUserInfo: app.appUserInfo,\n    serverUserMap: server.serverUserMap,\n    serverRole: app.serverRole\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setVisible: (params) => {\n      return dispatch({\n        type: \"channel/setVisible\",\n        payload: params\n      });\n    },\n    setServerUserMap: (params) => {\n      return dispatch({\n        type: \"server/setServerUserMap\",\n        payload: params\n      });\n    }\n  };\n};\n\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(MemberModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"index_contactsItem__lzFd6\",\"mainInfo\":\"index_mainInfo__7X7N6\",\"avatar\":\"index_avatar__kEaZt\",\"basicInfo\":\"index_basicInfo__eGYGv\",\"operation\":\"index_operation__HXDKF\",\"scrollWrap\":\"index_scrollWrap__kxK+a\",\"ellipsis\":\"index_ellipsis__oTGzT\",\"name\":\"index_name__5taw-\",\"muteIcon\":\"index_muteIcon__Iap+y\"};","import React, { memo, useMemo } from \"react\";\nimport s from \"./index.module.less\";\nimport { useParams } from \"react-router-dom\";\nimport WebIM from \"@/utils/WebIM\";\nimport AvatarInfo from \"@/components/AvatarInfo\";\nimport BasicInfo from \"@/components/BasicInfo\";\nimport Icon from \"@/components/Icon\";\nimport MemberOpt from \"../MemberOpt\";\nimport { useNavigate } from \"react-router-dom\";\nimport { USER_ROLE, CHAT, UN_MUTE, MUTE, KICK } from \"@/consts\";\nimport { connect } from \"react-redux\";\nimport { message } from \"antd\";\n\nconst MemberItem = (props) => {\n  const navigate = useNavigate();\n  const { serverId, channelId } = useParams();\n\n  const {\n    info,\n    uid,\n    basicShowOnline,\n    role,\n    serverRole,\n    channelMemberInfo,\n    setChannelUserMap,\n    muteList = [],\n    channelInfo,\n    setSelected,\n  } = props;\n\n  const selfRole = serverRole && serverRole[serverId];\n\n  const muteUser = (uid) => {\n    WebIM.conn\n      .muteChannelMember({\n        serverId,\n        channelId,\n        userId: uid,\n        duration: -1\n      })\n      .then(() => {\n        setChannelUserMap({\n          channelId,\n          userListInfo: {\n            ...channelMemberInfo,\n            muteList: muteList.length\n              ? [...muteList, { userId: uid }]\n              : [\n                {\n                  userId: uid\n                }\n              ]\n          }\n        });\n      }).catch(err=>{\n        if(err.type === 17 && JSON.parse(err.data).error_description === \"User is not in server.\"){\n          message.warn({ content: \"用户已退出社区\" });\n        }\n      });\n  };\n\n  const unMuteUser = (uid) => {\n    WebIM.conn\n      .unmuteChannelMember({\n        serverId,\n        channelId,\n        userId: uid\n      })\n      .then(() => {\n        let ls = [];\n        if (muteList?.length) {\n          ls = muteList;\n          let idx = ls.findIndex((item) => {\n            return item.userId === uid;\n          });\n          ls.splice(idx, 1);\n        }\n        setChannelUserMap({\n          channelId,\n          userListInfo: {\n            ...channelMemberInfo,\n            muteList: ls\n          }\n        });\n      }).catch(err=>{\n        if(err.type === 17 && JSON.parse(err.data).error_description === \"User is not in server.\"){\n          message.warn({ content: \"用户已退出社区\" });\n        }\n      });\n  };\n\n  const kickOut = (uid) => {\n    WebIM.conn.removeChannelMember({\n      serverId,\n      channelId,\n      userId: uid\n    }).then(() => {\n      const list = [...channelMemberInfo.list];\n      const findIndex = list.findIndex(item => uid === item.uid)\n      if (findIndex > -1) {\n        list.splice(findIndex,1)\n        setChannelUserMap({\n          channelId,\n          userListInfo: {\n            ...channelMemberInfo,\n            list,\n          }\n        });\n      }\n    }).catch(err=>{\n      if(err.type === 17 && JSON.parse(err.data).error_description === \"User is not in server.\"){\n        message.warn({ content: \"用户已退出社区\" });\n      }\n    });\n  };\n  const muteUid = muteList.map((item) => {\n    return item.userId;\n  });\n\n  const isMuted = muteUid.includes(uid);\n\n  const MemberMenuChildren = useMemo(() => {\n    let roleMenu = [];\n    if (WebIM.conn.user !== uid) {\n      roleMenu.push(CHAT);\n    }\n    if (selfRole === USER_ROLE.owner && role !== USER_ROLE.owner) {\n      if (isMuted) {\n        roleMenu.push(UN_MUTE);\n      } else {\n        roleMenu.push(MUTE);\n      }\n      channelInfo.defaultChannel !== 1 && roleMenu.push(KICK);\n    } else if (selfRole === USER_ROLE.moderator && role === USER_ROLE.user) {\n      if (isMuted) {\n        roleMenu.push(UN_MUTE);\n      } else {\n        roleMenu.push(MUTE);\n      }\n      channelInfo.defaultChannel !== 1 && roleMenu.push(KICK);\n    }\n\n    return roleMenu;\n  }, [uid, selfRole, role, isMuted, channelInfo.defaultChannel]);\n\n  const MemberMenuItems = [\n    {\n      label: <Icon iconClass={s.icon} name=\"ellipsis\" />,\n      key: \"SubMenu\",\n      children: MemberMenuChildren\n    }\n  ];\n\n  const onMenuClick = (e, { uid }) => {\n    switch (e.key) {\n      case \"chat\":\n        setSelected(\"contacts\");\n        navigate(`/main/contacts/chat/${uid}`);\n        break;\n      case \"mute\":\n        muteUser(uid);\n        break;\n      case \"unmute\":\n        unMuteUser(uid);\n        break;\n      case \"kick\":\n        kickOut(uid);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className={s.contactsItem}>\n      <div className={s.avatar}>\n        <AvatarInfo\n          size={36}\n          name={info?.nickname || uid}\n          src={info?.avatarurl}\n          online={info?.online}\n        />\n      </div>\n      <div className={s.mainInfo}>\n        <div className={s.basicInfo}>\n          <BasicInfo\n            name={\n              <div className={s.ellipsis}>\n                <span className={s.name}>{info?.nickname || uid}</span>\n                {isMuted && (\n                  <span className={s.muteIcon}><Icon\n                    style={{ marginLeft: \"4px\" }}\n                    size=\"16px\"\n                    name=\"person_wave_slash\"\n                  /></span>\n                )}\n              </div>\n            }\n            icon={info?.avatar}\n            online={info?.online}\n            showOnline={basicShowOnline}\n          />\n        </div>\n        <div className={s.operation}>\n          {\n            <MemberOpt\n              serverId={serverId}\n              isShowChat={false}\n              showOpIcon={MemberMenuChildren.length > 0}\n              uid={uid}\n              role={role}\n              onMenuClick={onMenuClick}\n              menuItems={MemberMenuItems}\n            />\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelected: (params) => {\n      return dispatch({\n        type: \"app/setSelectedTab\",\n        payload: params\n      });\n    },\n  }\n}\nexport default memo(connect(null, mapDispatchToProps)(MemberItem));","import React, { memo, useEffect, useMemo } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport s from \"./index.module.less\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport WebIM from \"@/utils/WebIM\";\nimport { getUsersInfo } from \"@/utils/common\";\nimport MemberItem from \"./memberItem\";\n\nconst LIMIT = 50;\n\nconst SCROLL_WARP_ID = \"channelMemberScrollWrap\";\n\nconst ChannelMember = (props) => {\n  const {\n    appUserInfo,\n    channelUserMap,\n    setChannelUserMap,\n    serverRole,\n    channelInfo\n  } = props;\n\n  const { serverId, channelId } = useParams();\n\n  const channelMemberInfo = useMemo(() => {\n    return channelUserMap.get(channelId) || {};\n  }, [channelId, channelUserMap]);\n\n  const selfRole = serverRole && serverRole[serverId];\n\n  const loadMoreData = () => {\n    getChannelMembers({ cursor: channelMemberInfo?.cursor });\n  };\n\n  const getMutedlist = () => {\n    WebIM.conn\n      .getChannelMutelist({\n        serverId,\n        channelId\n      })\n      .then((res) => {\n        getChannelMembers({ cursor: \"\", muteList: res.data.list });\n      });\n  };\n\n  const getChannelMembers = ({ cursor = \"\", muteList = null }) => {\n    WebIM.conn\n      .getChannelMembers({\n        serverId,\n        channelId,\n        pageSize: LIMIT,\n        cursor\n      })\n      .then((res) => {\n        const uidList = res.data.list.map((item) => item.userId);\n\n        let userRoleList = res.data.list.map((item) => {\n          return {\n            role: item.role,\n            uid: item.userId\n          };\n        });\n\n        let ls = [];\n\n        getUsersInfo(uidList);\n\n        if (channelMemberInfo.list && cursor !== \"\") {\n          ls = [...channelMemberInfo.list, ...userRoleList];\n        } else {\n          ls = userRoleList;\n        }\n\n        setChannelUserMap({\n          channelId,\n          userListInfo: {\n            muteList: muteList,\n            ...channelMemberInfo,\n            list: ls,\n            cursor: res.data.cursor,\n            loadCount: res.data.list.length\n          }\n        });\n      });\n  };\n\n  useEffect(() => {\n    if (selfRole !== \"user\") {\n      getMutedlist();\n    } else {\n      getChannelMembers({ cursor: \"\" });\n    }\n  }, [serverId, channelId, selfRole]);\n\n  return (\n    <div className={s.scrollWrap} id={SCROLL_WARP_ID}>\n      <InfiniteScroll\n        scrollableTarget={SCROLL_WARP_ID}\n        dataLength={channelMemberInfo?.list?.length || 0}\n        next={loadMoreData}\n        hasMore={channelMemberInfo.loadCount === LIMIT}\n        loader={<></>}\n        endMessage={<></>}\n      >\n        {channelMemberInfo?.list?.map((item) => {\n          return (\n            <MemberItem\n              style={{ padding: 0 }}\n              info={appUserInfo[item.uid]}\n              key={item.uid}\n              uid={item.uid}\n              role={item.role}\n              serverRole={serverRole}\n              channelMemberInfo={channelMemberInfo}\n              setChannelUserMap={setChannelUserMap}\n              muteList={channelMemberInfo?.muteList || []}\n              channelInfo={channelInfo}\n            ></MemberItem>\n          );\n        })}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ app, channel }) => {\n  return {\n    appUserInfo: app.appUserInfo,\n    channelUserMap: channel.channelUserMap,\n    serverRole: app.serverRole,\n    channelInfo: app.currentChannelInfo\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setChannelUserMap: (params) => {\n      return dispatch({\n        type: \"channel/setChannelUserMap\",\n        payload: params\n      });\n    }\n  };\n};\n\nexport default memo(\n  connect(mapStateToProps, mapDispatchToProps)(ChannelMember)\n);\n","import React, { memo, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport s from \"./index.module.less\";\nimport Header from \"./components/Header\";\nimport { connect } from \"react-redux\";\nimport MemberModal from \"./components/MemberModal\";\nimport { useParams } from \"react-router-dom\";\nimport MessageLeft from \"@/components/MessageLeft\";\nimport Input from \"@/components/Input\";\nimport {\n  CHAT_TYPE,\n  MESSAGE_ITEM_SOURCE,\n  INVITE_TYPE,\n  SCROLL_WARP_ID,\n  ACCEPT_INVITE_TYPE,\n  THREAD_PAGE_SIZE\n} from \"@/consts\";\nimport Thread from \"../Thread\";\nimport WebIM from \"@/utils/WebIM\";\nimport { message, Spin } from \"antd\";\nimport {\n  getThreadParentMsg,\n  recallMessage,\n  createMsg,\n  deliverMsg\n} from \"@/utils/common\";\nimport ChannelMember from \"./components/ChannelMember\";\nimport Icon from \"@/components/Icon\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst PAGE_SIZE = 20;\n\nconst ChannelMemberHeader = ({ onClose = () => { }, onInvite, channelInfo }) => {\n  return (\n    <div className={s.drawerHeader}>\n      <span className={s.channelMember}>频道成员</span>\n      <div className={s.iconCon}>\n        {/* 公开频道不显示邀请入口 */}\n        {!channelInfo?.defaultChannel && (\n          <span className={s.invite}><Icon\n            iconClass={s.icon}\n            onClick={() => {\n              onInvite(INVITE_TYPE.inviteChannel);\n            }}\n            name={\"person_plus\"}\n            size=\"24px\"\n          /></span>\n        )}\n        <span className={s.close}>\n          <Icon iconClass={s.icon} onClick={onClose} name={\"xmark\"} size=\"18px\" />\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst getServerInfoById = ({ serverId = \"\", serverList = [] }) => {\n  let ls = serverList.filter((item) => {\n    return item.id === serverId;\n  });\n\n  if (ls.length) {\n    return ls[0];\n  } else {\n    return {};\n  }\n};\n\nconst Channel = (props) => {\n  const {\n    setVisible,\n    chatMap,\n    showThreadPanel,\n    pushChatMessage,\n    handleThreadPanel,\n    setIsCreatingThread,\n    channelMemberVisible,\n    setChannelMemberVisible,\n    currentChannelInfo,\n    setThreadInfo,\n    setMsgReaction,\n    setThreadHasHistory,\n    setChannelFormVisible,\n    setInviteVisible,\n    insertChatMessage,\n    joinedServerInfo,\n    currentThreadInfo,\n    setThreadMap\n  } = props;\n\n  const { serverId, channelId } = useParams();\n\n  const ref = useRef();\n\n  const messageInfo = useMemo(() => {\n    return chatMap[CHAT_TYPE.groupChat].get(channelId) || {};\n  }, [channelId, chatMap]);\n\n  const getChannelThread = useCallback(\n    async ({ channelId, cursor = \"\" }) => {\n      try {\n        let res = await WebIM.conn.getChatThreads({\n          parentId: channelId,\n          pageSize: THREAD_PAGE_SIZE,\n          cursor\n        });\n        setThreadMap({\n          channelId,\n          threadInfo: {\n            list: res.entities,\n            cursor: res.properties.cursor,\n            loadCount: res.entities.length\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    [setThreadMap]\n  );\n\n  const isInChannel = useCallback(() => {\n    if (serverId && channelId) {\n      WebIM.conn.isInChannel({ serverId, channelId }).then((res) => {\n        if (!res.data.result) {\n          WebIM.conn\n            .joinChannel({\n              serverId,\n              channelId\n            })\n            .then((res) => {\n              getChannelThread({ channelId });\n              let msg = createMsg({\n                chatType: CHAT_TYPE.groupChat,\n                type: \"custom\",\n                to: channelId,\n                customEvent: ACCEPT_INVITE_TYPE.acceptInviteChannel,\n                customExts: {\n                  server_name: serverInfo.name,\n                  channel_name: res.data.name\n                }\n              });\n              deliverMsg(msg).then(() => {\n                insertChatMessage({\n                  chatType: msg.chatType,\n                  fromId: msg.to,\n                  messageInfo: {\n                    list: [{ ...msg, from: WebIM.conn.user }]\n                  }\n                });\n              });\n            });\n        }\n      });\n    }\n  }, [serverId, channelId]);\n\n  const getHistoryMsg = ({ cursor = \"\" }) => {\n    WebIM.conn\n      .getHistoryMessages({\n        targetId: channelId,\n        pageSize: PAGE_SIZE,\n        chatType: \"groupChat\",\n        cursor\n      })\n      .then((res) => {\n        res.messages.forEach((item) => {\n          setMsgReaction({\n            msgId: item.id,\n            reactions: item.reactions\n          });\n        });\n        pushChatMessage({\n          chatType: \"groupChat\",\n          fromId: channelId,\n          messageInfo: {\n            list: res.messages,\n            cursor: res.cursor,\n            loadCount: res.messages.length\n          },\n          reset: cursor ? false : true\n        });\n      });\n  };\n\n  //拉取漫游消息\n  useEffect(() => {\n    // 切换channel 关闭thread面板\n    handleThreadPanel(false);\n    //清空thread数据\n    setThreadInfo({});\n    getHistoryMsg({ cursor: \"\" });\n  }, [channelId]);\n\n  //消息操作\n  const handleOperation = (op, isChatThread = false, data, from) => {\n    switch (op) {\n      case \"createThread\":\n        setChannelMemberVisible(false);\n        setIsCreatingThread(true);\n        setThreadInfo({\n          parentMessage: data\n        });\n        handleThreadPanel(true);\n        setThreadHasHistory(false);\n        break;\n      case \"openThreadPanel\":\n        const chatThreadId =\n          from === \"threadList\" ? data.id : data.chatThreadOverview.id;\n        if (chatThreadId === currentThreadInfo.id) {\n          return;\n        }\n        WebIM.conn\n          .joinChatThread({ chatThreadId })\n          .then((res) => {\n            setChannelMemberVisible(false);\n            changeThreadStatus(data, from);\n          })\n          .catch((e) => {\n            if (e.type === 1301) {\n              setChannelMemberVisible(false);\n              //用户已经在子区了\n              changeThreadStatus(data, from);\n            } else if (e.type === 1300) {\n              message.warn({ content: \"该子区已经被销毁\" });\n            }\n          });\n        break;\n      case \"showMember\":\n        setThreadInfo({});\n        handleThreadPanel(false);\n        setChannelMemberVisible(!channelMemberVisible);\n        break;\n      case \"setting\":\n        setChannelFormVisible(\"edit\");\n        break;\n      case \"recall\":\n        recallMessage(data, isChatThread);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const changeThreadStatus = (data, from) => {\n    setIsCreatingThread(false);\n    //update currentThreadInfo\n    const chatThreadId =\n      from === \"threadList\" ? data.id : data.chatThreadOverview.id;\n    WebIM.conn.getChatThreadDetail({ chatThreadId }).then((res) => {\n      //从thread列表点击，需要查询本地消息\n      let findMsg =\n        from === \"threadList\"\n          ? getThreadParentMsg(data.parentId, data.messageId)\n          : data;\n      let parentMessage = findMsg ? { ...findMsg, chatThreadOverview: {} } : {};\n      setThreadInfo({ ...res.data, parentMessage });\n      //open threadPanel\n      handleThreadPanel(true);\n    });\n  };\n\n  const loadMoreData = () => {\n    getHistoryMsg({ cursor: messageInfo?.cursor });\n  };\n\n  useEffect(() => {\n    return () => {\n      setVisible(false);\n    };\n  }, [serverId]);\n\n  useEffect(() => {\n    isInChannel();\n    setVisible(false);\n  }, [channelId]);\n\n  const serverInfo = useMemo(() => {\n    return getServerInfoById({ serverId, serverList: joinedServerInfo.list });\n  }, [serverId, joinedServerInfo]);\n  return (\n    <div ref={ref} className={s.channelWrap}>\n      <div className={s.main}>\n        <Header\n          serverId={serverId}\n          channelId={channelId}\n          onHandleOperation={handleOperation}\n        />\n        <div className={s.contentWrap}>\n          <div id={SCROLL_WARP_ID} className={s.messageWrap}>\n            <InfiniteScroll\n              inverse={true}\n              dataLength={messageInfo?.list?.length || 0}\n              next={loadMoreData}\n              hasMore={messageInfo?.loadCount >= PAGE_SIZE}\n              style={{\n                display: \"flex\",\n                flexDirection: \"column-reverse\",\n                minHeight: \"435px\"\n              }}\n              loader={<Spin />}\n              endMessage={\n                <div style={{ textAlign: \"center\" }}>没有更多消息啦～</div>\n              }\n              scrollableTarget={SCROLL_WARP_ID}\n            >\n              {messageInfo?.list?.map((item) => {\n                return (\n                  <div key={item.id}>\n                    <MessageLeft\n                      parentId={channelId}\n                      message={item}\n                      onHandleOperation={handleOperation}\n                      source={MESSAGE_ITEM_SOURCE.groupChat}\n                    />\n                  </div>\n                );\n              })}\n            </InfiniteScroll>\n          </div>\n\n          <div className={s.iptWrap}>\n            <Input chatType={CHAT_TYPE.groupChat} fromId={channelId} />\n          </div>\n        </div>\n      </div>\n      <MemberModal />\n\n      {showThreadPanel && (\n        <div className={s.side}>\n          <Thread />\n        </div>\n      )}\n\n      {channelMemberVisible && (\n        <div className={s.drawerWrap}>\n          <ChannelMemberHeader\n            channelInfo={currentChannelInfo}\n            onInvite={setInviteVisible}\n            onClose={() => {\n              setChannelMemberVisible(false);\n            }}\n          />\n          <div className={s.drawerBody}>\n            <ChannelMember />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ channel, app, thread, server }) => {\n  return {\n    appUserInfo: app.appUserInfo,\n    chatMap: app.chatMap,\n    showThreadPanel: thread.showThreadPanel,\n    currentChannelInfo: app.currentChannelInfo,\n    channelMemberVisible: channel.channelMemberVisible,\n    joinedServerInfo: server.joinedServerInfo,\n    currentThreadInfo: thread.currentThreadInfo\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setVisible: (params) => {\n      return dispatch({\n        type: \"channel/setVisible\",\n        payload: params\n      });\n    },\n    pushChatMessage: (params) => {\n      return dispatch({\n        type: \"app/pushChatMessage\",\n        payload: params\n      });\n    },\n    handleThreadPanel: (params) => {\n      return dispatch({\n        type: \"thread/setThreadPanelStatus\",\n        payload: params\n      });\n    },\n    setIsCreatingThread: (params) => {\n      return dispatch({\n        type: \"thread/setIsCreatingThread\",\n        payload: params\n      });\n    },\n    setThreadInfo: (params) => {\n      return dispatch({\n        type: \"thread/setThreadInfo\",\n        payload: params\n      });\n    },\n    setMsgReaction: (params) => {\n      return dispatch({\n        type: \"app/setMsgReaction\",\n        payload: params\n      });\n    },\n    setThreadHasHistory: (params) => {\n      return dispatch({\n        type: \"thread/setThreadHasHistory\",\n        payload: params\n      });\n    },\n    setChannelMemberVisible: (params) => {\n      return dispatch({\n        type: \"channel/setChannelMemberVisible\",\n        payload: params\n      });\n    },\n    setChannelFormVisible: (params) => {\n      return dispatch({\n        type: \"channel/setChannelVisible\",\n        payload: params\n      });\n    },\n    setInviteVisible: (params) => {\n      return dispatch({\n        type: \"channel/setInviteVisible\",\n        payload: params\n      });\n    },\n    insertChatMessage: (params) => {\n      return dispatch({\n        type: \"app/insertChatMessage\",\n        payload: params\n      });\n    },\n    setThreadMap: (params) => {\n      return dispatch({\n        type: \"channel/setThreadMap\",\n        payload: params\n      });\n    }\n  };\n};\n\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(Channel));\n"],"names":["HeaderWrap","props","children","style","className","s","memo","SCROLL_WARP_ID","renderDefaultList","threadList","length","connect","app","serverRole","appUserInfo","dispatch","handleThreadPanel","params","type","payload","setThreadInfo","onHandleOperation","onClose","visibleThread","useParams","serverId","channelId","role","useState","setThreadList","useEffect","getThreadsList","setThreadListCursor","hasMore","setHasMore","threadListCursor","cursor","fetchFn","paramsData","parentId","pageSize","WebIM","then","res","list","entities","properties","chatThreadIds","map","item","id","msgList","forEach","found","find","msgInfo","chatThreadId","lastMessage","catch","isScroll","renderMessage","message","msg","onClick","CloseIcon","dataLength","next","loader","endMessage","scrollableTarget","option","index","e","openThreadPanel","name","JSON","stringify","AvatarInfo","size","src","from","avatarurl","nickname","renderTxt","getTimeDiff","time","ChannelHeader","setChannelInfo","channelInfo","joinedServerInfo","channelMemberVisible","setVisibleThread","userRole","data","getChannelInfo","navigate","useNavigate","isPublic","placement","content","trigger","visible","onVisibleChange","newVisible","overlayClassName","title","Icon","iconClass","USER_ROLE","defaultChannel","key","deleteLocalChannel","findIndex","defaultChannelId","padding","theme","selectable","triggerSubMenuAction","mode","items","getChannelItems","label","server","channel","currentChannelInfo","CustomModal","onCancel","width","top","getContainer","mask","footer","destroyOnClose","closeIcon","setSelected","uid","isShowChat","menuItems","showOpIcon","isServer","onMenuClick","isCreator","marginRight","Title","position","color","MemberMenuChildren","selfRole","menu","menu1","push","MemberMenuItems","memberVisible","serverUserMap","setVisible","setServerUserMap","serverMemberInfo","useMemo","get","onKick","ls","filter","userListInfo","updateUserRole","userList","fIndex","splice","userId","options","getServerMembers","uidList","userRoleList","getUsersInfo","loadCount","MemberItem","info","operationReactNode","basicShowOnline","channelMemberInfo","setChannelUserMap","muteList","isMuted","includes","roleMenu","CHAT","UN_MUTE","MUTE","KICK","online","BasicInfo","marginLeft","icon","avatar","showOnline","duration","err","parse","error_description","muteUser","idx","unMuteUser","kickOut","channelUserMap","getChannelMembers","ChannelMemberHeader","onInvite","INVITE_TYPE","thread","chatMap","showThreadPanel","currentThreadInfo","pushChatMessage","setIsCreatingThread","setMsgReaction","setThreadHasHistory","setChannelMemberVisible","setChannelFormVisible","setInviteVisible","insertChatMessage","setThreadMap","ref","useRef","messageInfo","CHAT_TYPE","getChannelThread","useCallback","THREAD_PAGE_SIZE","threadInfo","console","log","isInChannel","result","createMsg","chatType","to","customEvent","ACCEPT_INVITE_TYPE","customExts","server_name","serverInfo","channel_name","deliverMsg","fromId","getHistoryMsg","targetId","messages","msgId","reactions","reset","handleOperation","op","isChatThread","parentMessage","chatThreadOverview","changeThreadStatus","recallMessage","findMsg","getThreadParentMsg","messageId","serverList","getServerInfoById","Header","inverse","display","flexDirection","minHeight","textAlign","MessageLeft","source","MESSAGE_ITEM_SOURCE","Input","Thread"],"sourceRoot":""}